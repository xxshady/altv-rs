/* automatically generated by rust-bindgen */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _HAS_CONDITIONAL_EXPLICIT: u32 = 1;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202108;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 1;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 1;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & 'static [u8 ; 183usize] = b"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_hardware_interference_size: u32 = 201703;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_hypot: u32 = 201603;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_launder: u32 = 201606;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const __cpp_lib_sample: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_string_view: u32 = 201803;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_execution: u32 = 201603;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_WINXP: u32 = 1281;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1536;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    __vcrt_va_list_is_reference__bindgen_ty_1::__the_value;
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __vcrt_va_list_is_reference__bindgen_ty_1 {
    __the_value = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type std_integral_constant_value_type<_Ty> = _Ty;
pub type std_integral_constant_type = u8;
pub type std_bool_constant = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std_enable_if_t = u8;
pub type std_conditional_type<_Ty1> = _Ty1;
pub type std_conditional_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Ty> = _Ty;
pub type std_remove_const_t = std_remove_const;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Ty> = _Ty;
pub type std_remove_volatile_t = std_remove_volatile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Ty> = _Ty;
pub type std_remove_cv__Apply = u8;
pub type std_remove_cv_t = std_remove_cv;
pub type std__Disjunction_type<_First> = _First;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_disjunction {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Ty> = _Ty;
pub type std_remove_reference__Const_thru_ref_type<_Ty> = _Ty;
pub type std_remove_reference_t = std_remove_reference;
pub type std__Const_thru_ref = std_remove_reference;
pub type std__Remove_cvref_t = std_remove_cv_t;
pub type std_max_align_t = f64;
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_byte {
    __bindgen_cannot_repr_c_on_empty_enum = 0,
}
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_VectorLayout_float_3 {
    pub elements: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_alt_VectorLayout_float_3() {
    assert_eq!(
        ::std::mem::size_of::<alt_VectorLayout_float_3>(),
        8usize,
        concat!("Size of: ", stringify!(alt_VectorLayout_float_3))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_VectorLayout_float_3>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_VectorLayout_float_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_VectorLayout_float_3>())).elements as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_VectorLayout_float_3),
            "::",
            stringify!(elements)
        )
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_CAPI_Free(ptr: *mut alt_VectorLayout_float_3);
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create(_returnValue: *mut alt_VectorLayout_float_3);
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_CAPI_Heap() -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_1(
        _elements: *mut f32,
        _returnValue: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_1_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_2(
        el: *mut f32,
        _returnValue: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_2_CAPI_Heap(
        el: *mut f32,
    ) -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Access_size_t(
        _instance: *mut alt_VectorLayout_float_3,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Access_size_t_1(
        _instance: *mut alt_VectorLayout_float_3,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_3(
        _p0: *mut alt_VectorLayout_float_3,
        _returnValue: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_3_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_4(
        _p0: *mut alt_VectorLayout_float_3,
        _returnValue: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Create_4_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(
        _instance: *mut alt_VectorLayout_float_3,
        _p0: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(
        _instance: *mut alt_VectorLayout_float_3,
        _p0: *mut alt_VectorLayout_float_3,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_VectorLayout_float_4 {
    pub elements: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_alt_VectorLayout_float_4() {
    assert_eq!(
        ::std::mem::size_of::<alt_VectorLayout_float_4>(),
        8usize,
        concat!("Size of: ", stringify!(alt_VectorLayout_float_4))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_VectorLayout_float_4>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_VectorLayout_float_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_VectorLayout_float_4>())).elements as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_VectorLayout_float_4),
            "::",
            stringify!(elements)
        )
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_CAPI_Free(ptr: *mut alt_VectorLayout_float_4);
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create(_returnValue: *mut alt_VectorLayout_float_4);
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_CAPI_Heap() -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_1(
        _elements: *mut f32,
        _returnValue: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_1_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_2(
        el: *mut f32,
        _returnValue: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_2_CAPI_Heap(
        el: *mut f32,
    ) -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Access_size_t(
        _instance: *mut alt_VectorLayout_float_4,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Access_size_t_1(
        _instance: *mut alt_VectorLayout_float_4,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_3(
        _p0: *mut alt_VectorLayout_float_4,
        _returnValue: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_3_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_4(
        _p0: *mut alt_VectorLayout_float_4,
        _returnValue: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Create_4_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(
        _instance: *mut alt_VectorLayout_float_4,
        _p0: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(
        _instance: *mut alt_VectorLayout_float_4,
        _p0: *mut alt_VectorLayout_float_4,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Vector_float_3_VectorLayout_float_3 {
    pub elements: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_alt_Vector_float_3_VectorLayout_float_3() {
    assert_eq!(
        ::std::mem::size_of::<alt_Vector_float_3_VectorLayout_float_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(alt_Vector_float_3_VectorLayout_float_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Vector_float_3_VectorLayout_float_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_Vector_float_3_VectorLayout_float_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Vector_float_3_VectorLayout_float_3>())).elements as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Vector_float_3_VectorLayout_float_3),
            "::",
            stringify!(elements)
        )
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_CAPI_Free(
        ptr: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_3_to_alt_Vector_float_3_VectorLayout_float_3(
        from: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_to_alt_VectorLayout_float_3(
        from: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> *mut alt_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create(
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_CAPI_Heap(
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_1(
        _elements: *mut f32,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_1_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_2(
        el: *mut f32,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_2_CAPI_Heap(
        el: *mut f32,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Access_size_t(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Access_size_t_1(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_3(
        _p0: *mut alt_VectorLayout_float_3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_3_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_4(
        _p0: *mut alt_VectorLayout_float_3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_4_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        _p0: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        _p0: *mut alt_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_5(
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_5_CAPI_Heap(
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_6(
        _elements: *mut f32,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_6_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_7(
        layout: *mut alt_VectorLayout_float_3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_7_CAPI_Heap(
        layout: *mut alt_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_LengthSqr(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Length(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_8(
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_8_CAPI_Heap(
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_9(
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Create_9_CAPI_Heap(
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Assign_constVector_float_3_VectorLayout_float_3Ref(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_VectorLayout_float_3_Assign_Vector_float_3_VectorLayout_float_3RefRef(
        _instance: *mut alt_Vector_float_3_VectorLayout_float_3,
        _p0: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Vector_float_4_VectorLayout_float_4 {
    pub elements: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_alt_Vector_float_4_VectorLayout_float_4() {
    assert_eq!(
        ::std::mem::size_of::<alt_Vector_float_4_VectorLayout_float_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(alt_Vector_float_4_VectorLayout_float_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Vector_float_4_VectorLayout_float_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_Vector_float_4_VectorLayout_float_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Vector_float_4_VectorLayout_float_4>())).elements as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Vector_float_4_VectorLayout_float_4),
            "::",
            stringify!(elements)
        )
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_CAPI_Free(
        ptr: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_VectorLayout_float_4_to_alt_Vector_float_4_VectorLayout_float_4(
        from: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_to_alt_VectorLayout_float_4(
        from: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create(
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_CAPI_Heap(
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_1(
        _elements: *mut f32,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_1_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_2(
        el: *mut f32,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_2_CAPI_Heap(
        el: *mut f32,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Access_size_t(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_3(
        _p0: *mut alt_VectorLayout_float_4,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_3_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_4(
        _p0: *mut alt_VectorLayout_float_4,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_4_CAPI_Heap(
        _p0: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        _p0: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        _p0: *mut alt_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_5(
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_5_CAPI_Heap(
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_6(
        _elements: *mut f32,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_6_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_7(
        layout: *mut alt_VectorLayout_float_4,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_7_CAPI_Heap(
        layout: *mut alt_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_LengthSqr(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Length(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_8(
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_8_CAPI_Heap(
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_9(
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
        _returnValue: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Create_9_CAPI_Heap(
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
extern "C" {
    pub fn alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef(
        _instance: *mut alt_Vector_float_4_VectorLayout_float_4,
        _p0: *mut alt_Vector_float_4_VectorLayout_float_4,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Vector_float_3_PointLayout {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_alt_Vector_float_3_PointLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_Vector_float_3_PointLayout>(),
        12usize,
        concat!("Size of: ", stringify!(alt_Vector_float_3_PointLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Vector_float_3_PointLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(alt_Vector_float_3_PointLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Vector_float_3_PointLayout>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Vector_float_3_PointLayout),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Vector_float_3_PointLayout>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Vector_float_3_PointLayout),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Vector_float_3_PointLayout>())).z as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Vector_float_3_PointLayout),
            "::",
            stringify!(z)
        )
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_CAPI_Free(ptr: *mut alt_Vector_float_3_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_to_alt_Vector_float_3_PointLayout(
        from: *mut alt_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_to_alt_PointLayout(
        from: *mut alt_Vector_float_3_PointLayout,
    ) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create(_returnValue: *mut alt_Vector_float_3_PointLayout);
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_CAPI_Heap() -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_1(
        _x: f32,
        _y: f32,
        _z: f32,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_1_CAPI_Heap(
        _x: f32,
        _y: f32,
        _z: f32,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_2(
        elements: *mut f32,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_2_CAPI_Heap(
        elements: *mut f32,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Access_size_t(
        _instance: *mut alt_Vector_float_3_PointLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Access_size_t_1(
        _instance: *mut alt_Vector_float_3_PointLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_3(
        _p0: *mut alt_PointLayout,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_3_CAPI_Heap(
        _p0: *mut alt_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_4(
        _p0: *mut alt_PointLayout,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_4_CAPI_Heap(
        _p0: *mut alt_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Assign_constPointLayoutRef(
        _instance: *mut alt_Vector_float_3_PointLayout,
        _p0: *mut alt_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Assign_PointLayoutRefRef(
        _instance: *mut alt_Vector_float_3_PointLayout,
        _p0: *mut alt_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_5(
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_5_CAPI_Heap() -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_6(
        _elements: *mut f32,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_6_CAPI_Heap(
        _elements: *mut f32,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_7(
        layout: *mut alt_PointLayout,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_7_CAPI_Heap(
        layout: *mut alt_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_LengthSqr(
        _instance: *mut alt_Vector_float_3_PointLayout,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Length(
        _instance: *mut alt_Vector_float_3_PointLayout,
    ) -> f32;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_8(
        _p0: *mut alt_Vector_float_3_PointLayout,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_8_CAPI_Heap(
        _p0: *mut alt_Vector_float_3_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_9(
        _p0: *mut alt_Vector_float_3_PointLayout,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Create_9_CAPI_Heap(
        _p0: *mut alt_Vector_float_3_PointLayout,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Assign_constVector_float_3_PointLayoutRef(
        _instance: *mut alt_Vector_float_3_PointLayout,
        _p0: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_Vector_float_3_PointLayout_Assign_Vector_float_3_PointLayoutRefRef(
        _instance: *mut alt_Vector_float_3_PointLayout,
        _p0: *mut alt_Vector_float_3_PointLayout,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_PointLayout {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_alt_PointLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_PointLayout>(),
        12usize,
        concat!("Size of: ", stringify!(alt_PointLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_PointLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(alt_PointLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointLayout>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointLayout),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointLayout>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointLayout),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointLayout>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointLayout),
            "::",
            stringify!(z)
        )
    );
}
extern "C" {
    pub fn alt_PointLayout_CAPI_Free(ptr: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create(_returnValue: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create_CAPI_Heap() -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointLayout_Create_1(_x: f32, _y: f32, _z: f32, _returnValue: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create_1_CAPI_Heap(_x: f32, _y: f32, _z: f32) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointLayout_Create_2(elements: *mut f32, _returnValue: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create_2_CAPI_Heap(elements: *mut f32) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointLayout_Access_size_t(
        _instance: *mut alt_PointLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_PointLayout_Access_size_t_1(
        _instance: *mut alt_PointLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_PointLayout_Create_3(_p0: *mut alt_PointLayout, _returnValue: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create_3_CAPI_Heap(_p0: *mut alt_PointLayout) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointLayout_Create_4(_p0: *mut alt_PointLayout, _returnValue: *mut alt_PointLayout);
}
extern "C" {
    pub fn alt_PointLayout_Create_4_CAPI_Heap(_p0: *mut alt_PointLayout) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointLayout_Assign_constPointLayoutRef(
        _instance: *mut alt_PointLayout,
        _p0: *mut alt_PointLayout,
    );
}
extern "C" {
    pub fn alt_PointLayout_Assign_PointLayoutRefRef(
        _instance: *mut alt_PointLayout,
        _p0: *mut alt_PointLayout,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_PointPaddedLayout {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub pad: f32,
}
#[test]
fn bindgen_test_layout_alt_PointPaddedLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_PointPaddedLayout>(),
        16usize,
        concat!("Size of: ", stringify!(alt_PointPaddedLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_PointPaddedLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(alt_PointPaddedLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointPaddedLayout>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointPaddedLayout),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointPaddedLayout>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointPaddedLayout),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointPaddedLayout>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointPaddedLayout),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_PointPaddedLayout>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_PointPaddedLayout),
            "::",
            stringify!(pad)
        )
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_CAPI_Free(ptr: *mut alt_PointPaddedLayout);
}
extern "C" {
    pub fn alt_PointLayout_to_alt_PointPaddedLayout(
        from: *mut alt_PointLayout,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_to_alt_PointLayout(
        from: *mut alt_PointPaddedLayout,
    ) -> *mut alt_PointLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create(_returnValue: *mut alt_PointPaddedLayout);
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_CAPI_Heap() -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_1(
        _x: f32,
        _y: f32,
        _z: f32,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_1_CAPI_Heap(
        _x: f32,
        _y: f32,
        _z: f32,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_2(
        elements: *mut f32,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_2_CAPI_Heap(
        elements: *mut f32,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Access_size_t(
        _instance: *mut alt_PointPaddedLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Access_size_t_1(
        _instance: *mut alt_PointPaddedLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_3(
        _p0: *mut alt_PointLayout,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_3_CAPI_Heap(
        _p0: *mut alt_PointLayout,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_4(
        _p0: *mut alt_PointLayout,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_4_CAPI_Heap(
        _p0: *mut alt_PointLayout,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Assign_constPointLayoutRef(
        _instance: *mut alt_PointPaddedLayout,
        _p0: *mut alt_PointLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Assign_PointLayoutRefRef(
        _instance: *mut alt_PointPaddedLayout,
        _p0: *mut alt_PointLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_5(_returnValue: *mut alt_PointPaddedLayout);
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_5_CAPI_Heap() -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_6(
        x: f32,
        y: f32,
        z: f32,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_6_CAPI_Heap(
        x: f32,
        y: f32,
        z: f32,
    ) -> *mut alt_PointPaddedLayout;
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_7(
        elements: *mut f32,
        _returnValue: *mut alt_PointPaddedLayout,
    );
}
extern "C" {
    pub fn alt_PointPaddedLayout_Create_7_CAPI_Heap(
        elements: *mut f32,
    ) -> *mut alt_PointPaddedLayout;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RotationLayout {
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout_alt_RotationLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_RotationLayout>(),
        12usize,
        concat!("Size of: ", stringify!(alt_RotationLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RotationLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(alt_RotationLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationLayout>())).roll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationLayout),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationLayout>())).pitch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationLayout),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationLayout>())).yaw as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationLayout),
            "::",
            stringify!(yaw)
        )
    );
}
extern "C" {
    pub fn alt_RotationLayout_CAPI_Free(ptr: *mut alt_RotationLayout);
}
extern "C" {
    pub fn alt_RotationLayout_Create(
        _roll: f32,
        _pitch: f32,
        _yaw: f32,
        _returnValue: *mut alt_RotationLayout,
    );
}
extern "C" {
    pub fn alt_RotationLayout_Create_CAPI_Heap(
        _roll: f32,
        _pitch: f32,
        _yaw: f32,
    ) -> *mut alt_RotationLayout;
}
extern "C" {
    pub fn alt_RotationLayout_Create_1(_returnValue: *mut alt_RotationLayout);
}
extern "C" {
    pub fn alt_RotationLayout_Create_1_CAPI_Heap() -> *mut alt_RotationLayout;
}
extern "C" {
    pub fn alt_RotationLayout_Create_2(elements: *mut f32, _returnValue: *mut alt_RotationLayout);
}
extern "C" {
    pub fn alt_RotationLayout_Create_2_CAPI_Heap(elements: *mut f32) -> *mut alt_RotationLayout;
}
extern "C" {
    pub fn alt_RotationLayout_Access_size_t(
        _instance: *mut alt_RotationLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_RotationLayout_Access_size_t_1(
        _instance: *mut alt_RotationLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_RotationLayout_Normalize(_instance: *mut alt_RotationLayout);
}
extern "C" {
    pub fn alt_RotationLayout_Create_3(
        _p0: *mut alt_RotationLayout,
        _returnValue: *mut alt_RotationLayout,
    );
}
extern "C" {
    pub fn alt_RotationLayout_Create_3_CAPI_Heap(
        _p0: *mut alt_RotationLayout,
    ) -> *mut alt_RotationLayout;
}
extern "C" {
    pub fn alt_RotationLayout_Create_4(
        _p0: *mut alt_RotationLayout,
        _returnValue: *mut alt_RotationLayout,
    );
}
extern "C" {
    pub fn alt_RotationLayout_Create_4_CAPI_Heap(
        _p0: *mut alt_RotationLayout,
    ) -> *mut alt_RotationLayout;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RotationPaddedLayout {
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub pad: f32,
}
#[test]
fn bindgen_test_layout_alt_RotationPaddedLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_RotationPaddedLayout>(),
        16usize,
        concat!("Size of: ", stringify!(alt_RotationPaddedLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RotationPaddedLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(alt_RotationPaddedLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationPaddedLayout>())).roll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationPaddedLayout),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationPaddedLayout>())).pitch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationPaddedLayout),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationPaddedLayout>())).yaw as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationPaddedLayout),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RotationPaddedLayout>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RotationPaddedLayout),
            "::",
            stringify!(pad)
        )
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_CAPI_Free(ptr: *mut alt_RotationPaddedLayout);
}
extern "C" {
    pub fn alt_RotationLayout_to_alt_RotationPaddedLayout(
        from: *mut alt_RotationLayout,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_to_alt_RotationLayout(
        from: *mut alt_RotationPaddedLayout,
    ) -> *mut alt_RotationLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create(
        _roll: f32,
        _pitch: f32,
        _yaw: f32,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_CAPI_Heap(
        _roll: f32,
        _pitch: f32,
        _yaw: f32,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_1(_returnValue: *mut alt_RotationPaddedLayout);
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_1_CAPI_Heap() -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_2(
        elements: *mut f32,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_2_CAPI_Heap(
        elements: *mut f32,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Access_size_t(
        _instance: *mut alt_RotationPaddedLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Access_size_t_1(
        _instance: *mut alt_RotationPaddedLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut f32;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Normalize(_instance: *mut alt_RotationPaddedLayout);
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_3(
        _p0: *mut alt_RotationLayout,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_3_CAPI_Heap(
        _p0: *mut alt_RotationLayout,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_4(
        _p0: *mut alt_RotationLayout,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_4_CAPI_Heap(
        _p0: *mut alt_RotationLayout,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_5(_returnValue: *mut alt_RotationPaddedLayout);
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_5_CAPI_Heap() -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_6(
        roll: f32,
        pitch: f32,
        yaw: f32,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_6_CAPI_Heap(
        roll: f32,
        pitch: f32,
        yaw: f32,
    ) -> *mut alt_RotationPaddedLayout;
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_7(
        elements: *mut f32,
        _returnValue: *mut alt_RotationPaddedLayout,
    );
}
extern "C" {
    pub fn alt_RotationPaddedLayout_Create_7_CAPI_Heap(
        elements: *mut f32,
    ) -> *mut alt_RotationPaddedLayout;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_ViewMatrixLayout {
    pub right: alt_Vector_float_4_VectorLayout_float_4,
    pub up: alt_Vector_float_4_VectorLayout_float_4,
    pub forward: alt_Vector_float_4_VectorLayout_float_4,
    pub pos: alt_Vector_float_4_VectorLayout_float_4,
}
#[test]
fn bindgen_test_layout_alt_ViewMatrixLayout() {
    assert_eq!(
        ::std::mem::size_of::<alt_ViewMatrixLayout>(),
        32usize,
        concat!("Size of: ", stringify!(alt_ViewMatrixLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_ViewMatrixLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_ViewMatrixLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_ViewMatrixLayout>())).right as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_ViewMatrixLayout),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_ViewMatrixLayout>())).up as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_ViewMatrixLayout),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_ViewMatrixLayout>())).forward as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_ViewMatrixLayout),
            "::",
            stringify!(forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_ViewMatrixLayout>())).pos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_ViewMatrixLayout),
            "::",
            stringify!(pos)
        )
    );
}
extern "C" {
    pub fn alt_ViewMatrixLayout_CAPI_Free(ptr: *mut alt_ViewMatrixLayout);
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create(_returnValue: *mut alt_ViewMatrixLayout);
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_CAPI_Heap() -> *mut alt_ViewMatrixLayout;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_1(
        _rows: *mut alt_Vector_float_4_VectorLayout_float_4,
        _returnValue: *mut alt_ViewMatrixLayout,
    );
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_1_CAPI_Heap(
        _rows: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_ViewMatrixLayout;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_2(
        row: *mut alt_Vector_float_4_VectorLayout_float_4,
        _returnValue: *mut alt_ViewMatrixLayout,
    );
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_2_CAPI_Heap(
        row: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_ViewMatrixLayout;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_3(
        elements: *mut f32,
        _returnValue: *mut alt_ViewMatrixLayout,
    );
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_3_CAPI_Heap(elements: *mut f32)
        -> *mut alt_ViewMatrixLayout;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_4(
        _right: *mut alt_Vector_float_4_VectorLayout_float_4,
        _up: *mut alt_Vector_float_4_VectorLayout_float_4,
        _forward: *mut alt_Vector_float_4_VectorLayout_float_4,
        _pos: *mut alt_Vector_float_4_VectorLayout_float_4,
        _returnValue: *mut alt_ViewMatrixLayout,
    );
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Create_4_CAPI_Heap(
        _right: *mut alt_Vector_float_4_VectorLayout_float_4,
        _up: *mut alt_Vector_float_4_VectorLayout_float_4,
        _forward: *mut alt_Vector_float_4_VectorLayout_float_4,
        _pos: *mut alt_Vector_float_4_VectorLayout_float_4,
    ) -> *mut alt_ViewMatrixLayout;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Access_size_t(
        _instance: *mut alt_ViewMatrixLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
extern "C" {
    pub fn alt_ViewMatrixLayout_Access_size_t_1(
        _instance: *mut alt_ViewMatrixLayout,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_Vector_float_4_VectorLayout_float_4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_String {
    pub data: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_String() {
    assert_eq!(
        ::std::mem::size_of::<alt_String>(),
        16usize,
        concat!("Size of: ", stringify!(alt_String))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_String>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_String))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_String>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_String),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_String>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_String),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn alt_String_CAPI_Free(ptr: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Create(
        _size: ::std::os::raw::c_ulonglong,
        fill: ::std::os::raw::c_char,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_String_Create_CAPI_Heap(
        _size: ::std::os::raw::c_ulonglong,
        fill: ::std::os::raw::c_char,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Create_1(
        _data: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_String_Create_1_CAPI_Heap(
        _data: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Create_2(_returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Create_2_CAPI_Heap() -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Create_3(_str: *mut ::std::os::raw::c_char, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Create_3_CAPI_Heap(_str: *mut ::std::os::raw::c_char) -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Create_5(that: *mut alt_String, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Create_5_CAPI_Heap(that: *mut alt_String) -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Create_6(that: *mut alt_String, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Create_6_CAPI_Heap(that: *mut alt_String) -> *mut alt_String;
}
extern "C" {
    pub fn alt_String_Access_uint64_t(
        _instance: *mut alt_String,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_String_Access_uint64_t_1(
        _instance: *mut alt_String,
        key: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_String_Assign_constStringRef(_instance: *mut alt_String, that: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Assign_StringRefRef(_instance: *mut alt_String, that: *mut alt_String);
}
extern "C" {
    pub fn alt_String_Resize(_instance: *mut alt_String, new_size: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn alt_String_IsEmpty(_instance: *mut alt_String) -> bool;
}
extern "C" {
    pub fn alt_String_GetData(_instance: *mut alt_String) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_String_GetData_1(_instance: *mut alt_String) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_String_GetSize(_instance: *mut alt_String) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_String_Equals_String(_instance: *mut alt_String, that: *mut alt_String) -> bool;
}
extern "C" {
    pub fn alt_String_NotEquals_String(_instance: *mut alt_String, that: *mut alt_String) -> bool;
}
extern "C" {
    pub fn alt_String_CStr(_instance: *mut alt_String) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_StringView {
    pub data: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_StringView() {
    assert_eq!(
        ::std::mem::size_of::<alt_StringView>(),
        16usize,
        concat!("Size of: ", stringify!(alt_StringView))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_StringView>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_StringView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_StringView>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_StringView),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_StringView>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_StringView),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn alt_StringView_CAPI_Free(ptr: *mut alt_StringView);
}
extern "C" {
    pub fn alt_StringView_Create(
        _data: *mut ::std::os::raw::c_char,
        _size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_StringView_Create_CAPI_Heap(
        _data: *mut ::std::os::raw::c_char,
        _size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_Create_1(_returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_StringView_Create_1_CAPI_Heap() -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_Create_2(
        _str: *mut ::std::os::raw::c_char,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_StringView_Create_2_CAPI_Heap(
        _str: *mut ::std::os::raw::c_char,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_Create_4(_str: *mut alt_String, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_StringView_Create_4_CAPI_Heap(_str: *mut alt_String) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_IsEmpty(_instance: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_StringView_GetData(_instance: *mut alt_StringView) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_StringView_GetSize(_instance: *mut alt_StringView) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_StringView_Access_uint64_t(
        _instance: *mut alt_StringView,
        key: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_StringView_Equals_StringView(
        _instance: *mut alt_StringView,
        that: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_StringView_NotEquals_StringView(
        _instance: *mut alt_StringView,
        that: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_StringView_To_String(_instance: *mut alt_StringView, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_StringView_To_String_CAPI_Heap(_instance: *mut alt_StringView) -> *mut alt_String;
}
extern "C" {
    pub fn alt_StringView_CStr(_instance: *mut alt_StringView) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_StringView_Create_6(_p0: *mut alt_StringView, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_StringView_Create_6_CAPI_Heap(_p0: *mut alt_StringView) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_Create_7(_p0: *mut alt_StringView, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_StringView_Create_7_CAPI_Heap(_p0: *mut alt_StringView) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_StringView_Assign_constStringViewRef(
        _instance: *mut alt_StringView,
        _p0: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_StringView_Assign_StringViewRefRef(
        _instance: *mut alt_StringView,
        _p0: *mut alt_StringView,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RGBA {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_alt_RGBA() {
    assert_eq!(
        ::std::mem::size_of::<alt_RGBA>(),
        4usize,
        concat!("Size of: ", stringify!(alt_RGBA))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RGBA>(),
        1usize,
        concat!("Alignment of ", stringify!(alt_RGBA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RGBA>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RGBA),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RGBA>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RGBA),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RGBA>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RGBA),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RGBA>())).a as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RGBA),
            "::",
            stringify!(a)
        )
    );
}
extern "C" {
    pub fn alt_RGBA_CAPI_Free(ptr: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_RGBA_Create(_returnValue: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_RGBA_Create_CAPI_Heap() -> *mut alt_RGBA;
}
extern "C" {
    pub fn alt_RGBA_Create_1(
        _r: ::std::os::raw::c_uchar,
        _g: ::std::os::raw::c_uchar,
        _b: ::std::os::raw::c_uchar,
        _a: ::std::os::raw::c_uchar,
        _returnValue: *mut alt_RGBA,
    );
}
extern "C" {
    pub fn alt_RGBA_Create_1_CAPI_Heap(
        _r: ::std::os::raw::c_uchar,
        _g: ::std::os::raw::c_uchar,
        _b: ::std::os::raw::c_uchar,
        _a: ::std::os::raw::c_uchar,
    ) -> *mut alt_RGBA;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_RefBase_RefStore_constIMValue {
    pub data: *mut alt_RefBase_RefStore_constIMValue,
    pub size: ::std::os::raw::c_ulonglong,
    pub capacity: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_Array_RefBase_RefStore_constIMValue() {
    assert_eq!(
        ::std::mem::size_of::<alt_Array_RefBase_RefStore_constIMValue>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(alt_Array_RefBase_RefStore_constIMValue)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Array_RefBase_RefStore_constIMValue>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_Array_RefBase_RefStore_constIMValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Array_RefBase_RefStore_constIMValue>())).data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_RefBase_RefStore_constIMValue),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Array_RefBase_RefStore_constIMValue>())).size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_RefBase_RefStore_constIMValue),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_Array_RefBase_RefStore_constIMValue>())).capacity as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_RefBase_RefStore_constIMValue),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_CAPI_Free(
        ptr: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create(
        _returnValue: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_CAPI_Heap(
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_1(
        _data: *mut alt_RefBase_RefStore_constIMValue,
        _size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_1_CAPI_Heap(
        _data: *mut alt_RefBase_RefStore_constIMValue,
        _size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_2(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_2_CAPI_Heap(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_3(
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_3_CAPI_Heap(
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_4(
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Create_4_CAPI_Heap(
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Assign_constArray_RefBase_RefStore_constIMValueRef(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Assign_Array_RefBase_RefStore_constIMValueRefRef(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        that: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Push(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        el: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Reserve(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_GetSize(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_GetCapacity(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t_1(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_begin(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_begin_1(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_end(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_Array_RefBase_RefStore_constIMValue_end_1(
        _instance: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_StringView {
    pub data: *mut alt_StringView,
    pub size: ::std::os::raw::c_ulonglong,
    pub capacity: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_Array_StringView() {
    assert_eq!(
        ::std::mem::size_of::<alt_Array_StringView>(),
        24usize,
        concat!("Size of: ", stringify!(alt_Array_StringView))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Array_StringView>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_Array_StringView))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_StringView>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_StringView),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_StringView>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_StringView),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_StringView>())).capacity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_StringView),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn alt_Array_StringView_CAPI_Free(ptr: *mut alt_Array_StringView);
}
extern "C" {
    pub fn alt_Array_StringView_Create(_returnValue: *mut alt_Array_StringView);
}
extern "C" {
    pub fn alt_Array_StringView_Create_CAPI_Heap() -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Create_1(
        _data: *mut alt_StringView,
        _size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Create_1_CAPI_Heap(
        _data: *mut alt_StringView,
        _size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Create_2(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_StringView,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Create_2_CAPI_Heap(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_StringView,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Create_3(
        that: *mut alt_Array_StringView,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Create_3_CAPI_Heap(
        that: *mut alt_Array_StringView,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Create_4(
        that: *mut alt_Array_StringView,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Create_4_CAPI_Heap(
        that: *mut alt_Array_StringView,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Assign_constArray_StringViewRef(
        _instance: *mut alt_Array_StringView,
        that: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Assign_Array_StringViewRefRef(
        _instance: *mut alt_Array_StringView,
        that: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_Array_StringView_Push(_instance: *mut alt_Array_StringView, el: *mut alt_StringView);
}
extern "C" {
    pub fn alt_Array_StringView_Reserve(
        _instance: *mut alt_Array_StringView,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn alt_Array_StringView_GetSize(
        _instance: *mut alt_Array_StringView,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_StringView_GetCapacity(
        _instance: *mut alt_Array_StringView,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_StringView_Access_uint64_t(
        _instance: *mut alt_Array_StringView,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_Access_uint64_t_1(
        _instance: *mut alt_Array_StringView,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_begin(_instance: *mut alt_Array_StringView) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_begin_1(
        _instance: *mut alt_Array_StringView,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_end(_instance: *mut alt_Array_StringView) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_Array_StringView_end_1(_instance: *mut alt_Array_StringView) -> *mut alt_StringView;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_String {
    pub data: *mut alt_String,
    pub size: ::std::os::raw::c_ulonglong,
    pub capacity: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_Array_String() {
    assert_eq!(
        ::std::mem::size_of::<alt_Array_String>(),
        24usize,
        concat!("Size of: ", stringify!(alt_Array_String))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_Array_String>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_Array_String))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_String>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_String),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_String>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_String),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_Array_String>())).capacity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_Array_String),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn alt_Array_String_CAPI_Free(ptr: *mut alt_Array_String);
}
extern "C" {
    pub fn alt_Array_String_Create(_returnValue: *mut alt_Array_String);
}
extern "C" {
    pub fn alt_Array_String_Create_CAPI_Heap() -> *mut alt_Array_String;
}
extern "C" {
    pub fn alt_Array_String_Create_1(
        _data: *mut alt_String,
        _size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Create_1_CAPI_Heap(
        _data: *mut alt_String,
        _size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_Array_String;
}
extern "C" {
    pub fn alt_Array_String_Create_2(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_String,
        _returnValue: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Create_2_CAPI_Heap(
        _size: ::std::os::raw::c_ulonglong,
        fill: *mut alt_String,
    ) -> *mut alt_Array_String;
}
extern "C" {
    pub fn alt_Array_String_Create_3(
        that: *mut alt_Array_String,
        _returnValue: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Create_3_CAPI_Heap(
        that: *mut alt_Array_String,
    ) -> *mut alt_Array_String;
}
extern "C" {
    pub fn alt_Array_String_Create_4(
        that: *mut alt_Array_String,
        _returnValue: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Create_4_CAPI_Heap(
        that: *mut alt_Array_String,
    ) -> *mut alt_Array_String;
}
extern "C" {
    pub fn alt_Array_String_Assign_constArray_StringRef(
        _instance: *mut alt_Array_String,
        that: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Assign_Array_StringRefRef(
        _instance: *mut alt_Array_String,
        that: *mut alt_Array_String,
    );
}
extern "C" {
    pub fn alt_Array_String_Push(_instance: *mut alt_Array_String, el: *mut alt_String);
}
extern "C" {
    pub fn alt_Array_String_Reserve(
        _instance: *mut alt_Array_String,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn alt_Array_String_GetSize(
        _instance: *mut alt_Array_String,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_String_GetCapacity(
        _instance: *mut alt_Array_String,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_Array_String_Access_uint64_t(
        _instance: *mut alt_Array_String,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_Array_String_Access_uint64_t_1(
        _instance: *mut alt_Array_String,
        key: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_Array_String_begin(_instance: *mut alt_Array_String) -> *mut alt_String;
}
extern "C" {
    pub fn alt_Array_String_begin_1(_instance: *mut alt_Array_String) -> *mut alt_String;
}
extern "C" {
    pub fn alt_Array_String_end(_instance: *mut alt_Array_String) -> *mut alt_String;
}
extern "C" {
    pub fn alt_Array_String_end_1(_instance: *mut alt_Array_String) -> *mut alt_String;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IWeakRef {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IWeakRef() {
    assert_eq!(
        ::std::mem::size_of::<alt_IWeakRef>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IWeakRef))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IWeakRef>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IWeakRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IWeakRef>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IWeakRef),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IWeakRef_CAPI_Free(ptr: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IWeakRef_OnDestroy(_instance: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IWeakRef_Assign_constIWeakRefRef(
        _instance: *mut alt_IWeakRef,
        _p0: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IWeakRef_Assign_IWeakRefRefRef(_instance: *mut alt_IWeakRef, _p0: *mut alt_IWeakRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CRefCountable {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_CRefCountable_GetRefCount(
        _instance: *mut alt_CRefCountable,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_CRefCountable_AddRef(_instance: *mut alt_CRefCountable);
}
extern "C" {
    pub fn alt_CRefCountable_RemoveRef(_instance: *mut alt_CRefCountable);
}
extern "C" {
    pub fn alt_CRefCountable_AddWeakRef(_instance: *mut alt_CRefCountable, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_CRefCountable_RemoveWeakRef(
        _instance: *mut alt_CRefCountable,
        ref_: *mut alt_IWeakRef,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_constIMValue {
    pub ptr: *mut alt_IMValue,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_constIMValue() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_constIMValue>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_constIMValue))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_constIMValue>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_RefBase_RefStore_constIMValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_constIMValue>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_constIMValue),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_CAPI_Free(ptr: *mut alt_RefBase_RefStore_constIMValue);
}
extern "C" {
    pub fn alt_RefStore_constIMValue_to_alt_RefBase_RefStore_constIMValue(
        from: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_to_alt_RefStore_constIMValue(
        from: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Assign(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
        _ptr: *mut alt_IMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Free(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Get(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create(
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_CAPI_Heap(
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_1(
        _p0: *mut alt_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_2(
        _p0: *mut alt_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_3(
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_3_CAPI_Heap(
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_4(
        _ptr: *mut alt_IMValue,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_4_CAPI_Heap(
        _ptr: *mut alt_IMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_5(
        other: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_5_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_6(
        other: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_6_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_7(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Create_7_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_Assign_constRefBase_RefStore_constIMValueRef(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
        that: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_constIMValue_To__Bool(
        _instance: *mut alt_RefBase_RefStore_constIMValue,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IBaseObject {
    pub ptr: *mut alt_IBaseObject,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_IBaseObject() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_IBaseObject>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_IBaseObject))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_IBaseObject>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_RefBase_RefStore_IBaseObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_IBaseObject>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_IBaseObject),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_CAPI_Free(ptr: *mut alt_RefBase_RefStore_IBaseObject);
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_to_alt_RefBase_RefStore_IBaseObject(
        from: *mut alt_RefStore_IBaseObject,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_to_alt_RefStore_IBaseObject(
        from: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> *mut alt_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Assign(
        _instance: *mut alt_RefBase_RefStore_IBaseObject,
        _ptr: *mut alt_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Free(_instance: *mut alt_RefBase_RefStore_IBaseObject);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Get(
        _instance: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create(
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_CAPI_Heap(
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_1(
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_1_CAPI_Heap(
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_2(
        _ptr: *mut alt_IBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_2_CAPI_Heap(
        _ptr: *mut alt_IBaseObject,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_3(
        other: *mut alt_RefBase_RefStore_IBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_3_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_4(
        other: *mut alt_RefBase_RefStore_IBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_4_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_5(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Create_5_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_Assign_constRefBase_RefStore_IBaseObjectRef(
        _instance: *mut alt_RefBase_RefStore_IBaseObject,
        that: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IBaseObject_To__Bool(
        _instance: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IPlayer {
    pub ptr: *mut alt_IPlayer,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_IPlayer() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_IPlayer>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_IPlayer))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_IPlayer>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefBase_RefStore_IPlayer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_IPlayer>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_IPlayer),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_CAPI_Free(ptr: *mut alt_RefBase_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefStore_IPlayer_to_alt_RefBase_RefStore_IPlayer(
        from: *mut alt_RefStore_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_to_alt_RefStore_IPlayer(
        from: *mut alt_RefBase_RefStore_IPlayer,
    ) -> *mut alt_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Assign(
        _instance: *mut alt_RefBase_RefStore_IPlayer,
        _ptr: *mut alt_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Free(_instance: *mut alt_RefBase_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Get(
        _instance: *mut alt_RefBase_RefStore_IPlayer,
    ) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create(_returnValue: *mut alt_RefBase_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_CAPI_Heap() -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_1(
        _p0: *mut alt_RefStore_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_2(
        _p0: *mut alt_RefStore_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_3(_returnValue: *mut alt_RefBase_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_3_CAPI_Heap() -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_4(
        _ptr: *mut alt_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_4_CAPI_Heap(
        _ptr: *mut alt_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_5(
        other: *mut alt_RefBase_RefStore_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_5_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_6(
        other: *mut alt_RefBase_RefStore_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_6_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_7(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Create_7_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_Assign_constRefBase_RefStore_IPlayerRef(
        _instance: *mut alt_RefBase_RefStore_IPlayer,
        that: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_IPlayer,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IPlayer_To__Bool(
        _instance: *mut alt_RefBase_RefStore_IPlayer,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IVehicle {
    pub ptr: *mut alt_IVehicle,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_IVehicle() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_IVehicle>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_IVehicle))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_IVehicle>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefBase_RefStore_IVehicle))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_IVehicle>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_IVehicle),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_CAPI_Free(ptr: *mut alt_RefBase_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefStore_IVehicle_to_alt_RefBase_RefStore_IVehicle(
        from: *mut alt_RefStore_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_to_alt_RefStore_IVehicle(
        from: *mut alt_RefBase_RefStore_IVehicle,
    ) -> *mut alt_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Assign(
        _instance: *mut alt_RefBase_RefStore_IVehicle,
        _ptr: *mut alt_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Free(_instance: *mut alt_RefBase_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Get(
        _instance: *mut alt_RefBase_RefStore_IVehicle,
    ) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create(_returnValue: *mut alt_RefBase_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_CAPI_Heap() -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_1(
        _p0: *mut alt_RefStore_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_2(
        _p0: *mut alt_RefStore_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_3(_returnValue: *mut alt_RefBase_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_3_CAPI_Heap() -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_4(
        _ptr: *mut alt_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_4_CAPI_Heap(
        _ptr: *mut alt_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_5(
        other: *mut alt_RefBase_RefStore_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_5_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_6(
        other: *mut alt_RefBase_RefStore_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_6_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_7(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Create_7_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_Assign_constRefBase_RefStore_IVehicleRef(
        _instance: *mut alt_RefBase_RefStore_IVehicle,
        that: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_IVehicle,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IVehicle_To__Bool(
        _instance: *mut alt_RefBase_RefStore_IVehicle,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IEntity {
    pub ptr: *mut alt_IEntity,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_IEntity() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_IEntity>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_IEntity))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_IEntity>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefBase_RefStore_IEntity))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_IEntity>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_IEntity),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_CAPI_Free(ptr: *mut alt_RefBase_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefStore_IEntity_to_alt_RefBase_RefStore_IEntity(
        from: *mut alt_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_to_alt_RefStore_IEntity(
        from: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Assign(
        _instance: *mut alt_RefBase_RefStore_IEntity,
        _ptr: *mut alt_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Free(_instance: *mut alt_RefBase_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Get(
        _instance: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create(_returnValue: *mut alt_RefBase_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_CAPI_Heap() -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_1(
        _p0: *mut alt_RefStore_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_2(
        _p0: *mut alt_RefStore_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_3(_returnValue: *mut alt_RefBase_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_3_CAPI_Heap() -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_4(
        _ptr: *mut alt_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_4_CAPI_Heap(
        _ptr: *mut alt_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_5(
        other: *mut alt_RefBase_RefStore_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_5_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_6(
        other: *mut alt_RefBase_RefStore_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_6_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_7(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Create_7_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_Assign_constRefBase_RefStore_IEntityRef(
        _instance: *mut alt_RefBase_RefStore_IEntity,
        that: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_IEntity,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IEntity_To__Bool(
        _instance: *mut alt_RefBase_RefStore_IEntity,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IColShape {
    pub ptr: *mut alt_IColShape,
}
#[test]
fn bindgen_test_layout_alt_RefBase_RefStore_IColShape() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefBase_RefStore_IColShape>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefBase_RefStore_IColShape))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefBase_RefStore_IColShape>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefBase_RefStore_IColShape))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_RefBase_RefStore_IColShape>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefBase_RefStore_IColShape),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_CAPI_Free(ptr: *mut alt_RefBase_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefStore_IColShape_to_alt_RefBase_RefStore_IColShape(
        from: *mut alt_RefStore_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_to_alt_RefStore_IColShape(
        from: *mut alt_RefBase_RefStore_IColShape,
    ) -> *mut alt_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Assign(
        _instance: *mut alt_RefBase_RefStore_IColShape,
        _ptr: *mut alt_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Free(_instance: *mut alt_RefBase_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Get(
        _instance: *mut alt_RefBase_RefStore_IColShape,
    ) -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create(_returnValue: *mut alt_RefBase_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_CAPI_Heap() -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_1(
        _p0: *mut alt_RefStore_IColShape,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_2(
        _p0: *mut alt_RefStore_IColShape,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_3(
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_3_CAPI_Heap() -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_4(
        _ptr: *mut alt_IColShape,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_4_CAPI_Heap(
        _ptr: *mut alt_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_5(
        other: *mut alt_RefBase_RefStore_IColShape,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_5_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_6(
        other: *mut alt_RefBase_RefStore_IColShape,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_6_CAPI_Heap(
        other: *mut alt_RefBase_RefStore_IColShape,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_7(
        _p0: std_nullptr_t,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Create_7_CAPI_Heap(
        _p0: std_nullptr_t,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_Assign_constRefBase_RefStore_IColShapeRef(
        _instance: *mut alt_RefBase_RefStore_IColShape,
        that: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_IsEmpty(
        _instance: *mut alt_RefBase_RefStore_IColShape,
    ) -> bool;
}
extern "C" {
    pub fn alt_RefBase_RefStore_IColShape_To__Bool(
        _instance: *mut alt_RefBase_RefStore_IColShape,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_constIMValue {
    pub ptr: *mut alt_IMValue,
}
#[test]
fn bindgen_test_layout_alt_RefStore_constIMValue() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_constIMValue>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_constIMValue))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_constIMValue>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_constIMValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_constIMValue>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_constIMValue),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_constIMValue_CAPI_Free(ptr: *mut alt_RefStore_constIMValue);
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Assign(
        _instance: *mut alt_RefStore_constIMValue,
        _ptr: *mut alt_IMValue,
    );
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Free(_instance: *mut alt_RefStore_constIMValue);
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Get(
        _instance: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create(_returnValue: *mut alt_RefStore_constIMValue);
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create_CAPI_Heap() -> *mut alt_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create_1(
        _p0: *mut alt_RefStore_constIMValue,
        _returnValue: *mut alt_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create_2(
        _p0: *mut alt_RefStore_constIMValue,
        _returnValue: *mut alt_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_RefStore_constIMValue_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_constIMValue,
    ) -> *mut alt_RefStore_constIMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_IBaseObject {
    pub ptr: *mut alt_IBaseObject,
}
#[test]
fn bindgen_test_layout_alt_RefStore_IBaseObject() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_IBaseObject>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_IBaseObject))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_IBaseObject>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_IBaseObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_IBaseObject>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_IBaseObject),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_CAPI_Free(ptr: *mut alt_RefStore_IBaseObject);
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_Assign(
        _instance: *mut alt_RefStore_IBaseObject,
        _ptr: *mut alt_IBaseObject,
    );
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_Free(_instance: *mut alt_RefStore_IBaseObject);
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_Get(
        _instance: *mut alt_RefStore_IBaseObject,
    ) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_Create(_returnValue: *mut alt_RefStore_IBaseObject);
}
extern "C" {
    pub fn alt_RefStore_IBaseObject_Create_CAPI_Heap() -> *mut alt_RefStore_IBaseObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_IPlayer {
    pub ptr: *mut alt_IPlayer,
}
#[test]
fn bindgen_test_layout_alt_RefStore_IPlayer() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_IPlayer>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_IPlayer))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_IPlayer>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_IPlayer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_IPlayer>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_IPlayer),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_IPlayer_CAPI_Free(ptr: *mut alt_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Assign(
        _instance: *mut alt_RefStore_IPlayer,
        _ptr: *mut alt_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Free(_instance: *mut alt_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Get(_instance: *mut alt_RefStore_IPlayer) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create(_returnValue: *mut alt_RefStore_IPlayer);
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create_CAPI_Heap() -> *mut alt_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create_1(
        _p0: *mut alt_RefStore_IPlayer,
        _returnValue: *mut alt_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IPlayer,
    ) -> *mut alt_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create_2(
        _p0: *mut alt_RefStore_IPlayer,
        _returnValue: *mut alt_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_RefStore_IPlayer_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IPlayer,
    ) -> *mut alt_RefStore_IPlayer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_IVehicle {
    pub ptr: *mut alt_IVehicle,
}
#[test]
fn bindgen_test_layout_alt_RefStore_IVehicle() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_IVehicle>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_IVehicle))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_IVehicle>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_IVehicle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_IVehicle>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_IVehicle),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_IVehicle_CAPI_Free(ptr: *mut alt_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Assign(
        _instance: *mut alt_RefStore_IVehicle,
        _ptr: *mut alt_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Free(_instance: *mut alt_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Get(_instance: *mut alt_RefStore_IVehicle) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create(_returnValue: *mut alt_RefStore_IVehicle);
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create_CAPI_Heap() -> *mut alt_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create_1(
        _p0: *mut alt_RefStore_IVehicle,
        _returnValue: *mut alt_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IVehicle,
    ) -> *mut alt_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create_2(
        _p0: *mut alt_RefStore_IVehicle,
        _returnValue: *mut alt_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_RefStore_IVehicle_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IVehicle,
    ) -> *mut alt_RefStore_IVehicle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_IEntity {
    pub ptr: *mut alt_IEntity,
}
#[test]
fn bindgen_test_layout_alt_RefStore_IEntity() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_IEntity>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_IEntity))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_IEntity>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_IEntity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_IEntity>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_IEntity),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_IEntity_CAPI_Free(ptr: *mut alt_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefStore_IEntity_Assign(
        _instance: *mut alt_RefStore_IEntity,
        _ptr: *mut alt_IEntity,
    );
}
extern "C" {
    pub fn alt_RefStore_IEntity_Free(_instance: *mut alt_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefStore_IEntity_Get(_instance: *mut alt_RefStore_IEntity) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create(_returnValue: *mut alt_RefStore_IEntity);
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create_CAPI_Heap() -> *mut alt_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create_1(
        _p0: *mut alt_RefStore_IEntity,
        _returnValue: *mut alt_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IEntity,
    ) -> *mut alt_RefStore_IEntity;
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create_2(
        _p0: *mut alt_RefStore_IEntity,
        _returnValue: *mut alt_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_RefStore_IEntity_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IEntity,
    ) -> *mut alt_RefStore_IEntity;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefStore_IColShape {
    pub ptr: *mut alt_IColShape,
}
#[test]
fn bindgen_test_layout_alt_RefStore_IColShape() {
    assert_eq!(
        ::std::mem::size_of::<alt_RefStore_IColShape>(),
        8usize,
        concat!("Size of: ", stringify!(alt_RefStore_IColShape))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_RefStore_IColShape>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_RefStore_IColShape))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_RefStore_IColShape>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_RefStore_IColShape),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    pub fn alt_RefStore_IColShape_CAPI_Free(ptr: *mut alt_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefStore_IColShape_Assign(
        _instance: *mut alt_RefStore_IColShape,
        _ptr: *mut alt_IColShape,
    );
}
extern "C" {
    pub fn alt_RefStore_IColShape_Free(_instance: *mut alt_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefStore_IColShape_Get(_instance: *mut alt_RefStore_IColShape)
        -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create(_returnValue: *mut alt_RefStore_IColShape);
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create_CAPI_Heap() -> *mut alt_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create_1(
        _p0: *mut alt_RefStore_IColShape,
        _returnValue: *mut alt_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create_1_CAPI_Heap(
        _p0: *mut alt_RefStore_IColShape,
    ) -> *mut alt_RefStore_IColShape;
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create_2(
        _p0: *mut alt_RefStore_IColShape,
        _returnValue: *mut alt_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_RefStore_IColShape_Create_2_CAPI_Heap(
        _p0: *mut alt_RefStore_IColShape,
    ) -> *mut alt_RefStore_IColShape;
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValue(from: *mut alt_CRefCountable) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValue_to_alt_CRefCountable(from: *mut alt_IMValue) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValue_GetRefCount(_instance: *mut alt_IMValue) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValue_AddRef(_instance: *mut alt_IMValue);
}
extern "C" {
    pub fn alt_IMValue_RemoveRef(_instance: *mut alt_IMValue);
}
extern "C" {
    pub fn alt_IMValue_AddWeakRef(_instance: *mut alt_IMValue, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_RemoveWeakRef(_instance: *mut alt_IMValue, ref_: *mut alt_IWeakRef);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IMValue_Type {
    ALT_IMVALUE_TYPE_NONE = 0,
    ALT_IMVALUE_TYPE_NIL = 1,
    ALT_IMVALUE_TYPE_BOOL = 2,
    ALT_IMVALUE_TYPE_INT = 3,
    ALT_IMVALUE_TYPE_UINT = 4,
    ALT_IMVALUE_TYPE_DOUBLE = 5,
    ALT_IMVALUE_TYPE_STRING = 6,
    ALT_IMVALUE_TYPE_LIST = 7,
    ALT_IMVALUE_TYPE_DICT = 8,
    ALT_IMVALUE_TYPE_BASE_OBJECT = 9,
    ALT_IMVALUE_TYPE_FUNCTION = 10,
    ALT_IMVALUE_TYPE_VECTOR3 = 11,
    ALT_IMVALUE_TYPE_RGBA = 12,
    ALT_IMVALUE_TYPE_BYTE_ARRAY = 13,
}
extern "C" {
    pub fn alt_IMValue_GetType(_instance: *mut alt_IMValue) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValue_ToString(_instance: *mut alt_IMValue, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValue_ToString_CAPI_Heap(_instance: *mut alt_IMValue) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValue_ToNumber(_instance: *mut alt_IMValue) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValue {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValue_Clone(
        _instance: *mut alt_IMValue,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValue_Clone_CAPI_Heap(
        _instance: *mut alt_IMValue,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueNone {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueNone_CAPI_Free(ptr: *mut alt_IMValueNone);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueNone(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueNone;
}
extern "C" {
    pub fn alt_IMValueNone_to_alt_CRefCountable(
        from: *mut alt_IMValueNone,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueNone_GetRefCount(
        _instance: *mut alt_IMValueNone,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueNone_AddRef(_instance: *mut alt_IMValueNone);
}
extern "C" {
    pub fn alt_IMValueNone_RemoveRef(_instance: *mut alt_IMValueNone);
}
extern "C" {
    pub fn alt_IMValueNone_AddWeakRef(_instance: *mut alt_IMValueNone, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueNone_RemoveWeakRef(_instance: *mut alt_IMValueNone, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueNone(from: *mut alt_IMValue) -> *mut alt_IMValueNone;
}
extern "C" {
    pub fn alt_IMValueNone_to_alt_IMValue(from: *mut alt_IMValueNone) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueNone_GetType(_instance: *mut alt_IMValueNone) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueNone_ToString(_instance: *mut alt_IMValueNone, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueNone_ToString_CAPI_Heap(_instance: *mut alt_IMValueNone) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueNone_ToNumber(_instance: *mut alt_IMValueNone) -> f64;
}
extern "C" {
    pub fn alt_IMValueNone_Clone(
        _instance: *mut alt_IMValueNone,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueNone_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueNone,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueNil {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueNil_CAPI_Free(ptr: *mut alt_IMValueNil);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueNil(from: *mut alt_CRefCountable)
        -> *mut alt_IMValueNil;
}
extern "C" {
    pub fn alt_IMValueNil_to_alt_CRefCountable(from: *mut alt_IMValueNil)
        -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueNil_GetRefCount(
        _instance: *mut alt_IMValueNil,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueNil_AddRef(_instance: *mut alt_IMValueNil);
}
extern "C" {
    pub fn alt_IMValueNil_RemoveRef(_instance: *mut alt_IMValueNil);
}
extern "C" {
    pub fn alt_IMValueNil_AddWeakRef(_instance: *mut alt_IMValueNil, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueNil_RemoveWeakRef(_instance: *mut alt_IMValueNil, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueNil(from: *mut alt_IMValue) -> *mut alt_IMValueNil;
}
extern "C" {
    pub fn alt_IMValueNil_to_alt_IMValue(from: *mut alt_IMValueNil) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueNil_GetType(_instance: *mut alt_IMValueNil) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueNil_ToString(_instance: *mut alt_IMValueNil, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueNil_ToString_CAPI_Heap(_instance: *mut alt_IMValueNil) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueNil_ToNumber(_instance: *mut alt_IMValueNil) -> f64;
}
extern "C" {
    pub fn alt_IMValueNil_Clone(
        _instance: *mut alt_IMValueNil,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueNil_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueNil,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueBool {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueBool_CAPI_Free(ptr: *mut alt_IMValueBool);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueBool(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueBool;
}
extern "C" {
    pub fn alt_IMValueBool_to_alt_CRefCountable(
        from: *mut alt_IMValueBool,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueBool_GetRefCount(
        _instance: *mut alt_IMValueBool,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueBool_AddRef(_instance: *mut alt_IMValueBool);
}
extern "C" {
    pub fn alt_IMValueBool_RemoveRef(_instance: *mut alt_IMValueBool);
}
extern "C" {
    pub fn alt_IMValueBool_AddWeakRef(_instance: *mut alt_IMValueBool, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueBool_RemoveWeakRef(_instance: *mut alt_IMValueBool, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueBool(from: *mut alt_IMValue) -> *mut alt_IMValueBool;
}
extern "C" {
    pub fn alt_IMValueBool_to_alt_IMValue(from: *mut alt_IMValueBool) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueBool_GetType(_instance: *mut alt_IMValueBool) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueBool_ToString(_instance: *mut alt_IMValueBool, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueBool_ToString_CAPI_Heap(_instance: *mut alt_IMValueBool) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueBool_ToNumber(_instance: *mut alt_IMValueBool) -> f64;
}
extern "C" {
    pub fn alt_IMValueBool_Clone(
        _instance: *mut alt_IMValueBool,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueBool_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueBool,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueBool_Value(_instance: *mut alt_IMValueBool) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueInt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueInt_CAPI_Free(ptr: *mut alt_IMValueInt);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueInt(from: *mut alt_CRefCountable)
        -> *mut alt_IMValueInt;
}
extern "C" {
    pub fn alt_IMValueInt_to_alt_CRefCountable(from: *mut alt_IMValueInt)
        -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueInt_GetRefCount(
        _instance: *mut alt_IMValueInt,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueInt_AddRef(_instance: *mut alt_IMValueInt);
}
extern "C" {
    pub fn alt_IMValueInt_RemoveRef(_instance: *mut alt_IMValueInt);
}
extern "C" {
    pub fn alt_IMValueInt_AddWeakRef(_instance: *mut alt_IMValueInt, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueInt_RemoveWeakRef(_instance: *mut alt_IMValueInt, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueInt(from: *mut alt_IMValue) -> *mut alt_IMValueInt;
}
extern "C" {
    pub fn alt_IMValueInt_to_alt_IMValue(from: *mut alt_IMValueInt) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueInt_GetType(_instance: *mut alt_IMValueInt) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueInt_ToString(_instance: *mut alt_IMValueInt, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueInt_ToString_CAPI_Heap(_instance: *mut alt_IMValueInt) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueInt_ToNumber(_instance: *mut alt_IMValueInt) -> f64;
}
extern "C" {
    pub fn alt_IMValueInt_Clone(
        _instance: *mut alt_IMValueInt,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueInt_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueInt,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueInt_Value(_instance: *mut alt_IMValueInt) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueUInt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueUInt_CAPI_Free(ptr: *mut alt_IMValueUInt);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueUInt(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueUInt;
}
extern "C" {
    pub fn alt_IMValueUInt_to_alt_CRefCountable(
        from: *mut alt_IMValueUInt,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueUInt_GetRefCount(
        _instance: *mut alt_IMValueUInt,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueUInt_AddRef(_instance: *mut alt_IMValueUInt);
}
extern "C" {
    pub fn alt_IMValueUInt_RemoveRef(_instance: *mut alt_IMValueUInt);
}
extern "C" {
    pub fn alt_IMValueUInt_AddWeakRef(_instance: *mut alt_IMValueUInt, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueUInt_RemoveWeakRef(_instance: *mut alt_IMValueUInt, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueUInt(from: *mut alt_IMValue) -> *mut alt_IMValueUInt;
}
extern "C" {
    pub fn alt_IMValueUInt_to_alt_IMValue(from: *mut alt_IMValueUInt) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueUInt_GetType(_instance: *mut alt_IMValueUInt) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueUInt_ToString(_instance: *mut alt_IMValueUInt, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueUInt_ToString_CAPI_Heap(_instance: *mut alt_IMValueUInt) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueUInt_ToNumber(_instance: *mut alt_IMValueUInt) -> f64;
}
extern "C" {
    pub fn alt_IMValueUInt_Clone(
        _instance: *mut alt_IMValueUInt,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueUInt_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueUInt,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueUInt_Value(_instance: *mut alt_IMValueUInt) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueDouble {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueDouble_CAPI_Free(ptr: *mut alt_IMValueDouble);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueDouble(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueDouble;
}
extern "C" {
    pub fn alt_IMValueDouble_to_alt_CRefCountable(
        from: *mut alt_IMValueDouble,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueDouble_GetRefCount(
        _instance: *mut alt_IMValueDouble,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueDouble_AddRef(_instance: *mut alt_IMValueDouble);
}
extern "C" {
    pub fn alt_IMValueDouble_RemoveRef(_instance: *mut alt_IMValueDouble);
}
extern "C" {
    pub fn alt_IMValueDouble_AddWeakRef(_instance: *mut alt_IMValueDouble, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueDouble_RemoveWeakRef(
        _instance: *mut alt_IMValueDouble,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueDouble(from: *mut alt_IMValue) -> *mut alt_IMValueDouble;
}
extern "C" {
    pub fn alt_IMValueDouble_to_alt_IMValue(from: *mut alt_IMValueDouble) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueDouble_GetType(_instance: *mut alt_IMValueDouble) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueDouble_ToString(
        _instance: *mut alt_IMValueDouble,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueDouble_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueDouble,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueDouble_ToNumber(_instance: *mut alt_IMValueDouble) -> f64;
}
extern "C" {
    pub fn alt_IMValueDouble_Clone(
        _instance: *mut alt_IMValueDouble,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDouble_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueDouble,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueDouble_Value(_instance: *mut alt_IMValueDouble) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueString {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueString_CAPI_Free(ptr: *mut alt_IMValueString);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueString(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueString;
}
extern "C" {
    pub fn alt_IMValueString_to_alt_CRefCountable(
        from: *mut alt_IMValueString,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueString_GetRefCount(
        _instance: *mut alt_IMValueString,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueString_AddRef(_instance: *mut alt_IMValueString);
}
extern "C" {
    pub fn alt_IMValueString_RemoveRef(_instance: *mut alt_IMValueString);
}
extern "C" {
    pub fn alt_IMValueString_AddWeakRef(_instance: *mut alt_IMValueString, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueString_RemoveWeakRef(
        _instance: *mut alt_IMValueString,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueString(from: *mut alt_IMValue) -> *mut alt_IMValueString;
}
extern "C" {
    pub fn alt_IMValueString_to_alt_IMValue(from: *mut alt_IMValueString) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueString_GetType(_instance: *mut alt_IMValueString) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueString_ToString(
        _instance: *mut alt_IMValueString,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueString_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueString,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueString_ToNumber(_instance: *mut alt_IMValueString) -> f64;
}
extern "C" {
    pub fn alt_IMValueString_Clone(
        _instance: *mut alt_IMValueString,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueString_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueString,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueString_Value(
        _instance: *mut alt_IMValueString,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IMValueString_Value_CAPI_Heap(
        _instance: *mut alt_IMValueString,
    ) -> *mut alt_StringView;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueList {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueList_CAPI_Free(ptr: *mut alt_IMValueList);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueList(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueList;
}
extern "C" {
    pub fn alt_IMValueList_to_alt_CRefCountable(
        from: *mut alt_IMValueList,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueList_GetRefCount(
        _instance: *mut alt_IMValueList,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueList_AddRef(_instance: *mut alt_IMValueList);
}
extern "C" {
    pub fn alt_IMValueList_RemoveRef(_instance: *mut alt_IMValueList);
}
extern "C" {
    pub fn alt_IMValueList_AddWeakRef(_instance: *mut alt_IMValueList, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueList_RemoveWeakRef(_instance: *mut alt_IMValueList, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueList(from: *mut alt_IMValue) -> *mut alt_IMValueList;
}
extern "C" {
    pub fn alt_IMValueList_to_alt_IMValue(from: *mut alt_IMValueList) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueList_GetType(_instance: *mut alt_IMValueList) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueList_ToString(_instance: *mut alt_IMValueList, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueList_ToString_CAPI_Heap(_instance: *mut alt_IMValueList) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueList_ToNumber(_instance: *mut alt_IMValueList) -> f64;
}
extern "C" {
    pub fn alt_IMValueList_Clone(
        _instance: *mut alt_IMValueList,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueList,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueList_GetSize(_instance: *mut alt_IMValueList) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueList_Get(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_Get_CAPI_Heap(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueList_Get_1(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_Get_1_CAPI_Heap(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IMValueList_Set(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_Push(
        _instance: *mut alt_IMValueList,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_SetConst(
        _instance: *mut alt_IMValueList,
        i: ::std::os::raw::c_ulonglong,
        val: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IMValueList_PushConst(
        _instance: *mut alt_IMValueList,
        val: *mut alt_RefBase_RefStore_constIMValue,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueDict {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueDict_CAPI_Free(ptr: *mut alt_IMValueDict);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueDict(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueDict;
}
extern "C" {
    pub fn alt_IMValueDict_to_alt_CRefCountable(
        from: *mut alt_IMValueDict,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueDict_GetRefCount(
        _instance: *mut alt_IMValueDict,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueDict_AddRef(_instance: *mut alt_IMValueDict);
}
extern "C" {
    pub fn alt_IMValueDict_RemoveRef(_instance: *mut alt_IMValueDict);
}
extern "C" {
    pub fn alt_IMValueDict_AddWeakRef(_instance: *mut alt_IMValueDict, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueDict_RemoveWeakRef(_instance: *mut alt_IMValueDict, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueDict(from: *mut alt_IMValue) -> *mut alt_IMValueDict;
}
extern "C" {
    pub fn alt_IMValueDict_to_alt_IMValue(from: *mut alt_IMValueDict) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueDict_GetType(_instance: *mut alt_IMValueDict) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueDict_ToString(_instance: *mut alt_IMValueDict, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueDict_ToString_CAPI_Heap(_instance: *mut alt_IMValueDict) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueDict_ToNumber(_instance: *mut alt_IMValueDict) -> f64;
}
extern "C" {
    pub fn alt_IMValueDict_Clone(
        _instance: *mut alt_IMValueDict,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueDict,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueDict_GetSize(_instance: *mut alt_IMValueDict) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueDict_Get(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Get_CAPI_Heap(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueDict_Get_1(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Get_1_CAPI_Heap(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IMValueDict_Set(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_SetConst(
        _instance: *mut alt_IMValueDict,
        key: *mut alt_String,
        val: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Delete(_instance: *mut alt_IMValueDict, key: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueDict_Begin(_instance: *mut alt_IMValueDict) -> *mut alt_IMValueDict_Iterator;
}
extern "C" {
    pub fn alt_IMValueDict_Next(_instance: *mut alt_IMValueDict) -> *mut alt_IMValueDict_Iterator;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueDict_Iterator {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IMValueDict_Iterator() {
    assert_eq!(
        ::std::mem::size_of::<alt_IMValueDict_Iterator>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IMValueDict_Iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IMValueDict_Iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IMValueDict_Iterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IMValueDict_Iterator>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IMValueDict_Iterator),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_CAPI_Free(ptr: *mut alt_IMValueDict_Iterator);
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_GetKey(
        _instance: *mut alt_IMValueDict_Iterator,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_GetKey_CAPI_Heap(
        _instance: *mut alt_IMValueDict_Iterator,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_GetValue(
        _instance: *mut alt_IMValueDict_Iterator,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_GetValue_CAPI_Heap(
        _instance: *mut alt_IMValueDict_Iterator,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_Assign_constIMValueDict_IteratorRef(
        _instance: *mut alt_IMValueDict_Iterator,
        _p0: *mut alt_IMValueDict_Iterator,
    );
}
extern "C" {
    pub fn alt_IMValueDict_Iterator_Assign_IMValueDict_IteratorRefRef(
        _instance: *mut alt_IMValueDict_Iterator,
        _p0: *mut alt_IMValueDict_Iterator,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueBaseObject {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueBaseObject_CAPI_Free(ptr: *mut alt_IMValueBaseObject);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueBaseObject(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueBaseObject;
}
extern "C" {
    pub fn alt_IMValueBaseObject_to_alt_CRefCountable(
        from: *mut alt_IMValueBaseObject,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueBaseObject_GetRefCount(
        _instance: *mut alt_IMValueBaseObject,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueBaseObject_AddRef(_instance: *mut alt_IMValueBaseObject);
}
extern "C" {
    pub fn alt_IMValueBaseObject_RemoveRef(_instance: *mut alt_IMValueBaseObject);
}
extern "C" {
    pub fn alt_IMValueBaseObject_AddWeakRef(
        _instance: *mut alt_IMValueBaseObject,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValueBaseObject_RemoveWeakRef(
        _instance: *mut alt_IMValueBaseObject,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueBaseObject(
        from: *mut alt_IMValue,
    ) -> *mut alt_IMValueBaseObject;
}
extern "C" {
    pub fn alt_IMValueBaseObject_to_alt_IMValue(
        from: *mut alt_IMValueBaseObject,
    ) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueBaseObject_GetType(_instance: *mut alt_IMValueBaseObject)
        -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueBaseObject_ToString(
        _instance: *mut alt_IMValueBaseObject,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueBaseObject_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueBaseObject,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueBaseObject_ToNumber(_instance: *mut alt_IMValueBaseObject) -> f64;
}
extern "C" {
    pub fn alt_IMValueBaseObject_Clone(
        _instance: *mut alt_IMValueBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueBaseObject_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueBaseObject,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueBaseObject_Value(
        _instance: *mut alt_IMValueBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_IMValueBaseObject_Value_CAPI_Heap(
        _instance: *mut alt_IMValueBaseObject,
    ) -> *mut alt_RefBase_RefStore_IBaseObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueFunction {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueFunction_CAPI_Free(ptr: *mut alt_IMValueFunction);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueFunction(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueFunction;
}
extern "C" {
    pub fn alt_IMValueFunction_to_alt_CRefCountable(
        from: *mut alt_IMValueFunction,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueFunction_GetRefCount(
        _instance: *mut alt_IMValueFunction,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueFunction_AddRef(_instance: *mut alt_IMValueFunction);
}
extern "C" {
    pub fn alt_IMValueFunction_RemoveRef(_instance: *mut alt_IMValueFunction);
}
extern "C" {
    pub fn alt_IMValueFunction_AddWeakRef(
        _instance: *mut alt_IMValueFunction,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValueFunction_RemoveWeakRef(
        _instance: *mut alt_IMValueFunction,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueFunction(from: *mut alt_IMValue) -> *mut alt_IMValueFunction;
}
extern "C" {
    pub fn alt_IMValueFunction_to_alt_IMValue(from: *mut alt_IMValueFunction) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueFunction_GetType(_instance: *mut alt_IMValueFunction) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueFunction_ToString(
        _instance: *mut alt_IMValueFunction,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueFunction_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueFunction,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueFunction_ToNumber(_instance: *mut alt_IMValueFunction) -> f64;
}
extern "C" {
    pub fn alt_IMValueFunction_Clone(
        _instance: *mut alt_IMValueFunction,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueFunction_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueFunction,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueFunction_Call(
        _instance: *mut alt_IMValueFunction,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueFunction_Call_CAPI_Heap(
        _instance: *mut alt_IMValueFunction,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueFunction_Impl {
    pub vtable: *mut ::std::os::raw::c_void,
    pub refCount: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_alt_IMValueFunction_Impl() {
    assert_eq!(
        ::std::mem::size_of::<alt_IMValueFunction_Impl>(),
        16usize,
        concat!("Size of: ", stringify!(alt_IMValueFunction_Impl))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IMValueFunction_Impl>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IMValueFunction_Impl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IMValueFunction_Impl>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IMValueFunction_Impl),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_IMValueFunction_Impl>())).refCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IMValueFunction_Impl),
            "::",
            stringify!(refCount)
        )
    );
}
extern "C" {
    pub fn alt_IMValueFunction_Impl_Call(
        _instance: *mut alt_IMValueFunction_Impl,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueFunction_Impl_Call_CAPI_Heap(
        _instance: *mut alt_IMValueFunction_Impl,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueFunction_Impl_AddRef(_instance: *mut alt_IMValueFunction_Impl);
}
extern "C" {
    pub fn alt_IMValueFunction_Impl_RemoveRef(_instance: *mut alt_IMValueFunction_Impl);
}
extern "C" {
    pub fn alt_IMValueFunction_Impl_Assign_constIMValueFunction_ImplRef(
        _instance: *mut alt_IMValueFunction_Impl,
        _p0: *mut alt_IMValueFunction_Impl,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueVector3 {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueVector3_CAPI_Free(ptr: *mut alt_IMValueVector3);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueVector3(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueVector3;
}
extern "C" {
    pub fn alt_IMValueVector3_to_alt_CRefCountable(
        from: *mut alt_IMValueVector3,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueVector3_GetRefCount(
        _instance: *mut alt_IMValueVector3,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueVector3_AddRef(_instance: *mut alt_IMValueVector3);
}
extern "C" {
    pub fn alt_IMValueVector3_RemoveRef(_instance: *mut alt_IMValueVector3);
}
extern "C" {
    pub fn alt_IMValueVector3_AddWeakRef(
        _instance: *mut alt_IMValueVector3,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValueVector3_RemoveWeakRef(
        _instance: *mut alt_IMValueVector3,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueVector3(from: *mut alt_IMValue) -> *mut alt_IMValueVector3;
}
extern "C" {
    pub fn alt_IMValueVector3_to_alt_IMValue(from: *mut alt_IMValueVector3) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueVector3_GetType(_instance: *mut alt_IMValueVector3) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueVector3_ToString(
        _instance: *mut alt_IMValueVector3,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueVector3_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueVector3,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueVector3_ToNumber(_instance: *mut alt_IMValueVector3) -> f64;
}
extern "C" {
    pub fn alt_IMValueVector3_Clone(
        _instance: *mut alt_IMValueVector3,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueVector3_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueVector3,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueVector3_Value(
        _instance: *mut alt_IMValueVector3,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_IMValueVector3_Value_CAPI_Heap(
        _instance: *mut alt_IMValueVector3,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueRGBA {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueRGBA_CAPI_Free(ptr: *mut alt_IMValueRGBA);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueRGBA(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueRGBA;
}
extern "C" {
    pub fn alt_IMValueRGBA_to_alt_CRefCountable(
        from: *mut alt_IMValueRGBA,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueRGBA_GetRefCount(
        _instance: *mut alt_IMValueRGBA,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueRGBA_AddRef(_instance: *mut alt_IMValueRGBA);
}
extern "C" {
    pub fn alt_IMValueRGBA_RemoveRef(_instance: *mut alt_IMValueRGBA);
}
extern "C" {
    pub fn alt_IMValueRGBA_AddWeakRef(_instance: *mut alt_IMValueRGBA, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValueRGBA_RemoveWeakRef(_instance: *mut alt_IMValueRGBA, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueRGBA(from: *mut alt_IMValue) -> *mut alt_IMValueRGBA;
}
extern "C" {
    pub fn alt_IMValueRGBA_to_alt_IMValue(from: *mut alt_IMValueRGBA) -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueRGBA_GetType(_instance: *mut alt_IMValueRGBA) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueRGBA_ToString(_instance: *mut alt_IMValueRGBA, _returnValue: *mut alt_String);
}
extern "C" {
    pub fn alt_IMValueRGBA_ToString_CAPI_Heap(_instance: *mut alt_IMValueRGBA) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueRGBA_ToNumber(_instance: *mut alt_IMValueRGBA) -> f64;
}
extern "C" {
    pub fn alt_IMValueRGBA_Clone(
        _instance: *mut alt_IMValueRGBA,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueRGBA_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueRGBA,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueRGBA_Value(_instance: *mut alt_IMValueRGBA, _returnValue: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IMValueRGBA_Value_CAPI_Heap(_instance: *mut alt_IMValueRGBA) -> *mut alt_RGBA;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValueByteArray {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IMValueByteArray_CAPI_Free(ptr: *mut alt_IMValueByteArray);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IMValueByteArray(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IMValueByteArray;
}
extern "C" {
    pub fn alt_IMValueByteArray_to_alt_CRefCountable(
        from: *mut alt_IMValueByteArray,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IMValueByteArray_GetRefCount(
        _instance: *mut alt_IMValueByteArray,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueByteArray_AddRef(_instance: *mut alt_IMValueByteArray);
}
extern "C" {
    pub fn alt_IMValueByteArray_RemoveRef(_instance: *mut alt_IMValueByteArray);
}
extern "C" {
    pub fn alt_IMValueByteArray_AddWeakRef(
        _instance: *mut alt_IMValueByteArray,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValueByteArray_RemoveWeakRef(
        _instance: *mut alt_IMValueByteArray,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IMValue_to_alt_IMValueByteArray(from: *mut alt_IMValue)
        -> *mut alt_IMValueByteArray;
}
extern "C" {
    pub fn alt_IMValueByteArray_to_alt_IMValue(from: *mut alt_IMValueByteArray)
        -> *mut alt_IMValue;
}
extern "C" {
    pub fn alt_IMValueByteArray_GetType(_instance: *mut alt_IMValueByteArray) -> alt_IMValue_Type;
}
extern "C" {
    pub fn alt_IMValueByteArray_ToString(
        _instance: *mut alt_IMValueByteArray,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IMValueByteArray_ToString_CAPI_Heap(
        _instance: *mut alt_IMValueByteArray,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IMValueByteArray_ToNumber(_instance: *mut alt_IMValueByteArray) -> f64;
}
extern "C" {
    pub fn alt_IMValueByteArray_Clone(
        _instance: *mut alt_IMValueByteArray,
        _returnValue: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IMValueByteArray_Clone_CAPI_Heap(
        _instance: *mut alt_IMValueByteArray,
    ) -> *mut alt_RefBase_RefStore_IMValue;
}
extern "C" {
    pub fn alt_IMValueByteArray_GetSize(
        _instance: *mut alt_IMValueByteArray,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IMValueByteArray_GetData(
        _instance: *mut alt_IMValueByteArray,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IMValueByteArray_GetData_1(
        _instance: *mut alt_IMValueByteArray,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IBaseObject(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_CRefCountable(
        from: *mut alt_IBaseObject,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IBaseObject_GetRefCount(
        _instance: *mut alt_IBaseObject,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IBaseObject_AddRef(_instance: *mut alt_IBaseObject);
}
extern "C" {
    pub fn alt_IBaseObject_RemoveRef(_instance: *mut alt_IBaseObject);
}
extern "C" {
    pub fn alt_IBaseObject_AddWeakRef(_instance: *mut alt_IBaseObject, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_RemoveWeakRef(_instance: *mut alt_IBaseObject, ref_: *mut alt_IWeakRef);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IBaseObject_Type {
    ALT_IBASEOBJECT_TYPE_PLAYER = 0,
    ALT_IBASEOBJECT_TYPE_VEHICLE = 1,
    ALT_IBASEOBJECT_TYPE_BLIP = 2,
    ALT_IBASEOBJECT_TYPE_WEBVIEW = 3,
    ALT_IBASEOBJECT_TYPE_VOICE_CHANNEL = 4,
    ALT_IBASEOBJECT_TYPE_COLSHAPE = 5,
    ALT_IBASEOBJECT_TYPE_CHECKPOINT = 6,
}
extern "C" {
    pub fn alt_IBaseObject_GetType(_instance: *mut alt_IBaseObject) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IBaseObject_HasMetaData(
        _instance: *mut alt_IBaseObject,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IBaseObject_GetMetaData(
        _instance: *mut alt_IBaseObject,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IBaseObject_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IBaseObject,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IBaseObject_SetMetaData(
        _instance: *mut alt_IBaseObject,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IBaseObject_DeleteMetaData(
        _instance: *mut alt_IBaseObject,
        key: *mut alt_StringView,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IWorldObject {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IWorldObject(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_CRefCountable(
        from: *mut alt_IWorldObject,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IWorldObject_GetRefCount(
        _instance: *mut alt_IWorldObject,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IWorldObject_AddRef(_instance: *mut alt_IWorldObject);
}
extern "C" {
    pub fn alt_IWorldObject_RemoveRef(_instance: *mut alt_IWorldObject);
}
extern "C" {
    pub fn alt_IWorldObject_AddWeakRef(_instance: *mut alt_IWorldObject, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IWorldObject_RemoveWeakRef(
        _instance: *mut alt_IWorldObject,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IWorldObject(from: *mut alt_IBaseObject)
        -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IBaseObject(from: *mut alt_IWorldObject)
        -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IWorldObject_GetType(_instance: *mut alt_IWorldObject) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IWorldObject_HasMetaData(
        _instance: *mut alt_IWorldObject,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IWorldObject_GetMetaData(
        _instance: *mut alt_IWorldObject,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IWorldObject_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IWorldObject,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IWorldObject_SetMetaData(
        _instance: *mut alt_IWorldObject,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IWorldObject_DeleteMetaData(
        _instance: *mut alt_IWorldObject,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IWorldObject_GetPosition(
        _instance: *mut alt_IWorldObject,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IWorldObject_GetPosition_CAPI_Heap(
        _instance: *mut alt_IWorldObject,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IWorldObject_SetPosition(
        _instance: *mut alt_IWorldObject,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IWorldObject_GetDimension(_instance: *mut alt_IWorldObject)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IWorldObject_SetDimension(
        _instance: *mut alt_IWorldObject,
        dimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IEntity(from: *mut alt_CRefCountable) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_IEntity_to_alt_CRefCountable(from: *mut alt_IEntity) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IEntity_GetRefCount(_instance: *mut alt_IEntity) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IEntity_AddRef(_instance: *mut alt_IEntity);
}
extern "C" {
    pub fn alt_IEntity_RemoveRef(_instance: *mut alt_IEntity);
}
extern "C" {
    pub fn alt_IEntity_AddWeakRef(_instance: *mut alt_IEntity, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IEntity_RemoveWeakRef(_instance: *mut alt_IEntity, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IEntity(from: *mut alt_IBaseObject) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_IEntity_to_alt_IBaseObject(from: *mut alt_IEntity) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IEntity_GetType(_instance: *mut alt_IEntity) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IEntity_HasMetaData(_instance: *mut alt_IEntity, key: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_IEntity_GetMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IEntity_SetMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_DeleteMetaData(_instance: *mut alt_IEntity, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IEntity(from: *mut alt_IWorldObject) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_IEntity_to_alt_IWorldObject(from: *mut alt_IEntity) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IEntity_GetPosition(
        _instance: *mut alt_IEntity,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IEntity_GetPosition_CAPI_Heap(
        _instance: *mut alt_IEntity,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IEntity_SetPosition(
        _instance: *mut alt_IEntity,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IEntity_GetDimension(_instance: *mut alt_IEntity) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IEntity_SetDimension(_instance: *mut alt_IEntity, dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alt_IEntity_GetID(_instance: *mut alt_IEntity) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IEntity_GetNetworkOwner(
        _instance: *mut alt_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IEntity_GetNetworkOwner_CAPI_Heap(
        _instance: *mut alt_IEntity,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_IEntity_GetModel(_instance: *mut alt_IEntity) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Vector_float_3_RotationLayout {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IEntity_GetRotation(
        _instance: *mut alt_IEntity,
        _returnValue: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IEntity_GetRotation_CAPI_Heap(
        _instance: *mut alt_IEntity,
    ) -> *mut alt_Vector_float_3_RotationLayout;
}
extern "C" {
    pub fn alt_IEntity_SetRotation(
        _instance: *mut alt_IEntity,
        rot: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IEntity_HasSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IEntity_GetSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_GetSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IEntity_HasStreamSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IEntity_GetStreamSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_GetStreamSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IEntity_SetSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_DeleteSyncedMetaData(_instance: *mut alt_IEntity, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IEntity_SetStreamSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IEntity_DeleteStreamSyncedMetaData(
        _instance: *mut alt_IEntity,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IPlayer(from: *mut alt_CRefCountable) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_IPlayer_to_alt_CRefCountable(from: *mut alt_IPlayer) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IPlayer_GetRefCount(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPlayer_AddRef(_instance: *mut alt_IPlayer);
}
extern "C" {
    pub fn alt_IPlayer_RemoveRef(_instance: *mut alt_IPlayer);
}
extern "C" {
    pub fn alt_IPlayer_AddWeakRef(_instance: *mut alt_IPlayer, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IPlayer_RemoveWeakRef(_instance: *mut alt_IPlayer, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IPlayer(from: *mut alt_IBaseObject) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_IPlayer_to_alt_IBaseObject(from: *mut alt_IPlayer) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IPlayer_GetType(_instance: *mut alt_IPlayer) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IPlayer_HasMetaData(_instance: *mut alt_IPlayer, key: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IPlayer_SetMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_DeleteMetaData(_instance: *mut alt_IPlayer, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IPlayer(from: *mut alt_IWorldObject) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_IPlayer_to_alt_IWorldObject(from: *mut alt_IPlayer) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IPlayer_GetPosition(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetPosition_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IPlayer_SetPosition(
        _instance: *mut alt_IPlayer,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetDimension(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IPlayer_SetDimension(_instance: *mut alt_IPlayer, dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alt_IEntity_to_alt_IPlayer(from: *mut alt_IEntity) -> *mut alt_IPlayer;
}
extern "C" {
    pub fn alt_IPlayer_to_alt_IEntity(from: *mut alt_IPlayer) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_IPlayer_GetID(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_GetNetworkOwner(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetNetworkOwner_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_IPlayer_GetModel(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IPlayer_GetRotation(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetRotation_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Vector_float_3_RotationLayout;
}
extern "C" {
    pub fn alt_IPlayer_SetRotation(
        _instance: *mut alt_IPlayer,
        rot: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_HasSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IPlayer_HasStreamSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetStreamSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetStreamSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IPlayer_SetSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_DeleteSyncedMetaData(_instance: *mut alt_IPlayer, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IPlayer_SetStreamSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IPlayer_DeleteStreamSyncedMetaData(
        _instance: *mut alt_IPlayer,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IPlayer_IsConnected(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetPing(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IPlayer_GetIP(_instance: *mut alt_IPlayer, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IPlayer_GetIP_CAPI_Heap(_instance: *mut alt_IPlayer) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IPlayer_Spawn(
        _instance: *mut alt_IPlayer,
        pos: *mut alt_Vector_float_3_PointLayout,
        delayMs: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IPlayer_Despawn(_instance: *mut alt_IPlayer);
}
extern "C" {
    pub fn alt_IPlayer_GetName(_instance: *mut alt_IPlayer, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IPlayer_GetName_CAPI_Heap(_instance: *mut alt_IPlayer) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IPlayer_GetSocialID(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPlayer_GetHwidHash(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPlayer_GetHwidExHash(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPlayer_GetAuthToken(_instance: *mut alt_IPlayer, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IPlayer_GetAuthToken_CAPI_Heap(_instance: *mut alt_IPlayer) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IPlayer_GetHealth(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_SetHealth(_instance: *mut alt_IPlayer, health: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alt_IPlayer_GetMaxHealth(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_SetMaxHealth(_instance: *mut alt_IPlayer, health: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alt_IPlayer_SetDateTime(
        _instance: *mut alt_IPlayer,
        day: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
        year: ::std::os::raw::c_int,
        hour: ::std::os::raw::c_int,
        minute: ::std::os::raw::c_int,
        second: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_IPlayer_SetWeather(_instance: *mut alt_IPlayer, weather: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn alt_IPlayer_GiveWeapon(
        _instance: *mut alt_IPlayer,
        weapon: ::std::os::raw::c_uint,
        ammo: ::std::os::raw::c_int,
        selectWeapon: bool,
    );
}
extern "C" {
    pub fn alt_IPlayer_RemoveWeapon(_instance: *mut alt_IPlayer, weapon: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn alt_IPlayer_RemoveAllWeapons(_instance: *mut alt_IPlayer);
}
extern "C" {
    pub fn alt_IPlayer_AddWeaponComponent(
        _instance: *mut alt_IPlayer,
        weapon: ::std::os::raw::c_uint,
        component: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IPlayer_RemoveWeaponComponent(
        _instance: *mut alt_IPlayer,
        weapon: ::std::os::raw::c_uint,
        component: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_unsignedint {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IPlayer_GetCurrentWeaponComponents(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Array_unsignedint,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetCurrentWeaponComponents_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Array_unsignedint;
}
extern "C" {
    pub fn alt_IPlayer_SetWeaponTintIndex(
        _instance: *mut alt_IPlayer,
        weapon: ::std::os::raw::c_uint,
        tintIndex: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetCurrentWeaponTintIndex(
        _instance: *mut alt_IPlayer,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IPlayer_GetCurrentWeapon(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IPlayer_SetCurrentWeapon(
        _instance: *mut alt_IPlayer,
        weapon: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IPlayer_IsDead(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_IsJumping(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_IsInRagdoll(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_IsAiming(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_IsShooting(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_IsReloading(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetArmour(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_SetArmour(_instance: *mut alt_IPlayer, armor: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alt_IPlayer_GetMaxArmour(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_SetMaxArmour(_instance: *mut alt_IPlayer, armor: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alt_IPlayer_GetMoveSpeed(_instance: *mut alt_IPlayer) -> f32;
}
extern "C" {
    pub fn alt_IPlayer_GetWeapon(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IPlayer_GetAmmo(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IPlayer_GetAimPos(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetAimPos_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IPlayer_GetHeadRotation(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetHeadRotation_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Vector_float_3_RotationLayout;
}
extern "C" {
    pub fn alt_IPlayer_IsInVehicle(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_GetVehicle(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetVehicle_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_IPlayer_GetSeat(_instance: *mut alt_IPlayer) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IPlayer_GetEntityAimingAt(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetEntityAimingAt_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_IPlayer_GetEntityAimOffset(
        _instance: *mut alt_IPlayer,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IPlayer_GetEntityAimOffset_CAPI_Heap(
        _instance: *mut alt_IPlayer,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IPlayer_IsFlashlightActive(_instance: *mut alt_IPlayer) -> bool;
}
extern "C" {
    pub fn alt_IPlayer_Kick(_instance: *mut alt_IPlayer, reason: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IPlayer_SetModel(_instance: *mut alt_IPlayer, model: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IVehicle(from: *mut alt_CRefCountable) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_IVehicle_to_alt_CRefCountable(from: *mut alt_IVehicle) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IVehicle_GetRefCount(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IVehicle_AddRef(_instance: *mut alt_IVehicle);
}
extern "C" {
    pub fn alt_IVehicle_RemoveRef(_instance: *mut alt_IVehicle);
}
extern "C" {
    pub fn alt_IVehicle_AddWeakRef(_instance: *mut alt_IVehicle, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IVehicle_RemoveWeakRef(_instance: *mut alt_IVehicle, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IVehicle(from: *mut alt_IBaseObject) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_IVehicle_to_alt_IBaseObject(from: *mut alt_IVehicle) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IVehicle_GetType(_instance: *mut alt_IVehicle) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IVehicle_HasMetaData(_instance: *mut alt_IVehicle, key: *mut alt_StringView)
        -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IVehicle_SetMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_DeleteMetaData(_instance: *mut alt_IVehicle, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IVehicle(from: *mut alt_IWorldObject) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_IVehicle_to_alt_IWorldObject(from: *mut alt_IVehicle) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IVehicle_GetPosition(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetPosition_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IVehicle_SetPosition(
        _instance: *mut alt_IVehicle,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDimension(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IVehicle_SetDimension(
        _instance: *mut alt_IVehicle,
        dimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_IEntity_to_alt_IVehicle(from: *mut alt_IEntity) -> *mut alt_IVehicle;
}
extern "C" {
    pub fn alt_IVehicle_to_alt_IEntity(from: *mut alt_IVehicle) -> *mut alt_IEntity;
}
extern "C" {
    pub fn alt_IVehicle_GetID(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_IVehicle_GetNetworkOwner(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetNetworkOwner_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_IVehicle_GetModel(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IVehicle_GetRotation(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetRotation_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_Vector_float_3_RotationLayout;
}
extern "C" {
    pub fn alt_IVehicle_SetRotation(
        _instance: *mut alt_IVehicle,
        rot: *mut alt_Vector_float_3_RotationLayout,
    );
}
extern "C" {
    pub fn alt_IVehicle_HasSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IVehicle_HasStreamSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetStreamSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetStreamSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IVehicle_SetSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_DeleteSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetStreamSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IVehicle_DeleteStreamSyncedMetaData(
        _instance: *mut alt_IVehicle,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDriver(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDriver_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_IVehicle_IsDestroyed(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetMod(
        _instance: *mut alt_IVehicle,
        category: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetModsCount(
        _instance: *mut alt_IVehicle,
        category: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetMod(
        _instance: *mut alt_IVehicle,
        category: ::std::os::raw::c_uchar,
        id: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetModKitsCount(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetModKit(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetModKit(
        _instance: *mut alt_IVehicle,
        id: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_IsPrimaryColorRGB(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetPrimaryColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetPrimaryColorRGB(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_RGBA,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetPrimaryColorRGB_CAPI_Heap(_instance: *mut alt_IVehicle)
        -> *mut alt_RGBA;
}
extern "C" {
    pub fn alt_IVehicle_SetPrimaryColor(
        _instance: *mut alt_IVehicle,
        color: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetPrimaryColorRGB(_instance: *mut alt_IVehicle, color: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IVehicle_IsSecondaryColorRGB(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetSecondaryColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetSecondaryColorRGB(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_RGBA,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetSecondaryColorRGB_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_RGBA;
}
extern "C" {
    pub fn alt_IVehicle_SetSecondaryColor(
        _instance: *mut alt_IVehicle,
        color: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetSecondaryColorRGB(_instance: *mut alt_IVehicle, color: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IVehicle_GetPearlColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetPearlColor(_instance: *mut alt_IVehicle, color: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_GetWheelColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelColor(_instance: *mut alt_IVehicle, color: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_GetInteriorColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetInteriorColor(
        _instance: *mut alt_IVehicle,
        color: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDashboardColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetDashboardColor(
        _instance: *mut alt_IVehicle,
        color: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsTireSmokeColorCustom(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetTireSmokeColor(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_RGBA,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetTireSmokeColor_CAPI_Heap(_instance: *mut alt_IVehicle) -> *mut alt_RGBA;
}
extern "C" {
    pub fn alt_IVehicle_SetTireSmokeColor(_instance: *mut alt_IVehicle, color: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IVehicle_GetWheelType(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetWheelVariation(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetRearWheelVariation(
        _instance: *mut alt_IVehicle,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetWheels(
        _instance: *mut alt_IVehicle,
        type_: ::std::os::raw::c_uchar,
        variation: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetRearWheels(
        _instance: *mut alt_IVehicle,
        variation: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetCustomTires(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetCustomTires(_instance: *mut alt_IVehicle, state: bool);
}
extern "C" {
    pub fn alt_IVehicle_GetSpecialDarkness(_instance: *mut alt_IVehicle)
        -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetSpecialDarkness(
        _instance: *mut alt_IVehicle,
        value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetNumberplateIndex(_instance: *mut alt_IVehicle)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IVehicle_SetNumberplateIndex(
        _instance: *mut alt_IVehicle,
        index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetNumberplateText(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetNumberplateText_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IVehicle_SetNumberplateText(_instance: *mut alt_IVehicle, text: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IVehicle_GetWindowTint(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetWindowTint(_instance: *mut alt_IVehicle, tint: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_GetDirtLevel(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetDirtLevel(_instance: *mut alt_IVehicle, level: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_IsExtraOn(
        _instance: *mut alt_IVehicle,
        extraID: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_ToggleExtra(
        _instance: *mut alt_IVehicle,
        extraID: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsNeonActive(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetNeonActive(
        _instance: *mut alt_IVehicle,
        left: *mut bool,
        right: *mut bool,
        front: *mut bool,
        back: *mut bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetNeonActive(
        _instance: *mut alt_IVehicle,
        left: bool,
        right: bool,
        front: bool,
        back: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetNeonColor(_instance: *mut alt_IVehicle, _returnValue: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IVehicle_GetNeonColor_CAPI_Heap(_instance: *mut alt_IVehicle) -> *mut alt_RGBA;
}
extern "C" {
    pub fn alt_IVehicle_SetNeonColor(_instance: *mut alt_IVehicle, color: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_IVehicle_GetLivery(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetLivery(_instance: *mut alt_IVehicle, livery: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_GetRoofLivery(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetRoofLivery(
        _instance: *mut alt_IVehicle,
        roofLivery: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetAppearanceDataBase64(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetAppearanceDataBase64_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IVehicle_LoadAppearanceDataFromBase64(
        _instance: *mut alt_IVehicle,
        base64: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsEngineOn(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetEngineOn(_instance: *mut alt_IVehicle, state: bool);
}
extern "C" {
    pub fn alt_IVehicle_IsHandbrakeActive(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetHeadlightColor(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetHeadlightColor(
        _instance: *mut alt_IVehicle,
        color: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetRadioStationIndex(
        _instance: *mut alt_IVehicle,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IVehicle_SetRadioStationIndex(
        _instance: *mut alt_IVehicle,
        stationIndex: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsSirenActive(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetSirenActive(_instance: *mut alt_IVehicle, state: bool);
}
extern "C" {
    pub fn alt_IVehicle_GetLockState(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetLockState(_instance: *mut alt_IVehicle, state: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IVehicle_GetDoorState(
        _instance: *mut alt_IVehicle,
        doorId: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetDoorState(
        _instance: *mut alt_IVehicle,
        doorId: ::std::os::raw::c_uchar,
        state: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsWindowOpened(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWindowOpened(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsDaylightOn(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_IsNightlightOn(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_IsRoofOpened(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetRoofOpened(_instance: *mut alt_IVehicle, state: bool);
}
extern "C" {
    pub fn alt_IVehicle_IsFlamethrowerActive(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetLightsMultiplier(_instance: *mut alt_IVehicle) -> f32;
}
extern "C" {
    pub fn alt_IVehicle_SetLightsMultiplier(_instance: *mut alt_IVehicle, multiplier: f32);
}
extern "C" {
    pub fn alt_IVehicle_GetGameStateBase64(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetGameStateBase64_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IVehicle_LoadGameStateFromBase64(
        _instance: *mut alt_IVehicle,
        base64: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetEngineHealth(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IVehicle_SetEngineHealth(
        _instance: *mut alt_IVehicle,
        health: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetPetrolTankHealth(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IVehicle_SetPetrolTankHealth(
        _instance: *mut alt_IVehicle,
        health: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetWheelsCount(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_IsWheelBurst(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelBurst(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_DoesWheelHasTire(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelHasTire(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsWheelDetached(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelDetached(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsWheelOnFire(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelOnFire(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
        state: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetWheelHealth(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
    ) -> f32;
}
extern "C" {
    pub fn alt_IVehicle_SetWheelHealth(
        _instance: *mut alt_IVehicle,
        wheelId: ::std::os::raw::c_uchar,
        health: f32,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetRepairsCount(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_GetBodyHealth(_instance: *mut alt_IVehicle) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IVehicle_SetBodyHealth(_instance: *mut alt_IVehicle, health: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn alt_IVehicle_GetBodyAdditionalHealth(
        _instance: *mut alt_IVehicle,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_IVehicle_SetBodyAdditionalHealth(
        _instance: *mut alt_IVehicle,
        health: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetHealthDataBase64(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetHealthDataBase64_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IVehicle_LoadHealthDataFromBase64(
        _instance: *mut alt_IVehicle,
        base64: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetPartDamageLevel(
        _instance: *mut alt_IVehicle,
        partId: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetPartDamageLevel(
        _instance: *mut alt_IVehicle,
        partId: ::std::os::raw::c_uchar,
        damage: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetPartBulletHoles(
        _instance: *mut alt_IVehicle,
        partId: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetPartBulletHoles(
        _instance: *mut alt_IVehicle,
        partId: ::std::os::raw::c_uchar,
        shootsCount: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsLightDamaged(
        _instance: *mut alt_IVehicle,
        lightId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetLightDamaged(
        _instance: *mut alt_IVehicle,
        lightId: ::std::os::raw::c_uchar,
        isDamaged: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsWindowDamaged(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetWindowDamaged(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
        isDamaged: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsSpecialLightDamaged(
        _instance: *mut alt_IVehicle,
        specialLightId: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_SetSpecialLightDamaged(
        _instance: *mut alt_IVehicle,
        specialLightId: ::std::os::raw::c_uchar,
        isDamaged: bool,
    );
}
extern "C" {
    pub fn alt_IVehicle_HasArmoredWindows(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetArmoredWindowHealth(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
    ) -> f32;
}
extern "C" {
    pub fn alt_IVehicle_SetArmoredWindowHealth(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
        health: f32,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetArmoredWindowShootCount(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetArmoredWindowShootCount(
        _instance: *mut alt_IVehicle,
        windowId: ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetBumperDamageLevel(
        _instance: *mut alt_IVehicle,
        bumperId: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_IVehicle_SetBumperDamageLevel(
        _instance: *mut alt_IVehicle,
        bumperId: ::std::os::raw::c_uchar,
        damageLevel: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDamageDataBase64(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetDamageDataBase64_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IVehicle_LoadDamageDataFromBase64(
        _instance: *mut alt_IVehicle,
        base64: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_SetManualEngineControl(_instance: *mut alt_IVehicle, state: bool);
}
extern "C" {
    pub fn alt_IVehicle_IsManualEngineControl(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_IVehicle_GetScriptDataBase64(
        _instance: *mut alt_IVehicle,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_IVehicle_GetScriptDataBase64_CAPI_Heap(
        _instance: *mut alt_IVehicle,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_IVehicle_LoadScriptDataFromBase64(
        _instance: *mut alt_IVehicle,
        base64: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVehicle_IsDestroyed_1(_instance: *mut alt_IVehicle) -> bool;
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IColShape(from: *mut alt_CRefCountable) -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_IColShape_to_alt_CRefCountable(from: *mut alt_IColShape) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IColShape_GetRefCount(_instance: *mut alt_IColShape) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IColShape_AddRef(_instance: *mut alt_IColShape);
}
extern "C" {
    pub fn alt_IColShape_RemoveRef(_instance: *mut alt_IColShape);
}
extern "C" {
    pub fn alt_IColShape_AddWeakRef(_instance: *mut alt_IColShape, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IColShape_RemoveWeakRef(_instance: *mut alt_IColShape, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IColShape(from: *mut alt_IBaseObject) -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_IColShape_to_alt_IBaseObject(from: *mut alt_IColShape) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IColShape_GetType(_instance: *mut alt_IColShape) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IColShape_HasMetaData(
        _instance: *mut alt_IColShape,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IColShape_GetMetaData(
        _instance: *mut alt_IColShape,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IColShape_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IColShape,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IColShape_SetMetaData(
        _instance: *mut alt_IColShape,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IColShape_DeleteMetaData(_instance: *mut alt_IColShape, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IColShape(from: *mut alt_IWorldObject) -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_IColShape_to_alt_IWorldObject(from: *mut alt_IColShape) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IColShape_GetPosition(
        _instance: *mut alt_IColShape,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IColShape_GetPosition_CAPI_Heap(
        _instance: *mut alt_IColShape,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IColShape_SetPosition(
        _instance: *mut alt_IColShape,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IColShape_GetDimension(_instance: *mut alt_IColShape) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IColShape_SetDimension(
        _instance: *mut alt_IColShape,
        dimension: ::std::os::raw::c_int,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IColShape_ColShapeType {
    ALT_ICOLSHAPE_COLSHAPETYPE_SPHERE = 0,
    ALT_ICOLSHAPE_COLSHAPETYPE_CYLINDER = 1,
    ALT_ICOLSHAPE_COLSHAPETYPE_CIRCLE = 2,
    ALT_ICOLSHAPE_COLSHAPETYPE_CUBOID = 3,
    ALT_ICOLSHAPE_COLSHAPETYPE_RECT = 4,
    ALT_ICOLSHAPE_COLSHAPETYPE_CHECKPOINT_CYLINDER = 5,
}
extern "C" {
    pub fn alt_IColShape_GetColshapeType(
        _instance: *mut alt_IColShape,
    ) -> alt_IColShape_ColShapeType;
}
extern "C" {
    pub fn alt_IColShape_IsEntityIn(
        _instance: *mut alt_IColShape,
        ent: *mut alt_RefBase_RefStore_IEntity,
    ) -> bool;
}
extern "C" {
    pub fn alt_IColShape_IsPointIn(
        _instance: *mut alt_IColShape,
        p: *mut alt_Vector_float_3_PointLayout,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_ICheckpoint {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_ICheckpoint(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_ICheckpoint;
}
extern "C" {
    pub fn alt_ICheckpoint_to_alt_CRefCountable(
        from: *mut alt_ICheckpoint,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_ICheckpoint_GetRefCount(
        _instance: *mut alt_ICheckpoint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_ICheckpoint_AddRef(_instance: *mut alt_ICheckpoint);
}
extern "C" {
    pub fn alt_ICheckpoint_RemoveRef(_instance: *mut alt_ICheckpoint);
}
extern "C" {
    pub fn alt_ICheckpoint_AddWeakRef(_instance: *mut alt_ICheckpoint, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_ICheckpoint_RemoveWeakRef(_instance: *mut alt_ICheckpoint, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_ICheckpoint(from: *mut alt_IBaseObject) -> *mut alt_ICheckpoint;
}
extern "C" {
    pub fn alt_ICheckpoint_to_alt_IBaseObject(from: *mut alt_ICheckpoint) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_ICheckpoint_GetType(_instance: *mut alt_ICheckpoint) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_ICheckpoint_HasMetaData(
        _instance: *mut alt_ICheckpoint,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_ICheckpoint_GetMetaData(
        _instance: *mut alt_ICheckpoint,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_ICheckpoint_GetMetaData_CAPI_Heap(
        _instance: *mut alt_ICheckpoint,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_ICheckpoint_SetMetaData(
        _instance: *mut alt_ICheckpoint,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_ICheckpoint_DeleteMetaData(
        _instance: *mut alt_ICheckpoint,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_ICheckpoint(from: *mut alt_IWorldObject)
        -> *mut alt_ICheckpoint;
}
extern "C" {
    pub fn alt_ICheckpoint_to_alt_IWorldObject(from: *mut alt_ICheckpoint)
        -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_ICheckpoint_GetPosition(
        _instance: *mut alt_ICheckpoint,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_ICheckpoint_GetPosition_CAPI_Heap(
        _instance: *mut alt_ICheckpoint,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_ICheckpoint_SetPosition(
        _instance: *mut alt_ICheckpoint,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_ICheckpoint_GetDimension(_instance: *mut alt_ICheckpoint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_ICheckpoint_SetDimension(
        _instance: *mut alt_ICheckpoint,
        dimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alt_IColShape_to_alt_ICheckpoint(from: *mut alt_IColShape) -> *mut alt_ICheckpoint;
}
extern "C" {
    pub fn alt_ICheckpoint_to_alt_IColShape(from: *mut alt_ICheckpoint) -> *mut alt_IColShape;
}
extern "C" {
    pub fn alt_ICheckpoint_GetColshapeType(
        _instance: *mut alt_ICheckpoint,
    ) -> alt_IColShape_ColShapeType;
}
extern "C" {
    pub fn alt_ICheckpoint_IsEntityIn(
        _instance: *mut alt_ICheckpoint,
        ent: *mut alt_RefBase_RefStore_IEntity,
    ) -> bool;
}
extern "C" {
    pub fn alt_ICheckpoint_IsPointIn(
        _instance: *mut alt_ICheckpoint,
        p: *mut alt_Vector_float_3_PointLayout,
    ) -> bool;
}
extern "C" {
    pub fn alt_ICheckpoint_GetCheckpointType(
        _instance: *mut alt_ICheckpoint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_ICheckpoint_GetHeight(_instance: *mut alt_ICheckpoint) -> f32;
}
extern "C" {
    pub fn alt_ICheckpoint_GetRadius(_instance: *mut alt_ICheckpoint) -> f32;
}
extern "C" {
    pub fn alt_ICheckpoint_GetColor(_instance: *mut alt_ICheckpoint, _returnValue: *mut alt_RGBA);
}
extern "C" {
    pub fn alt_ICheckpoint_GetColor_CAPI_Heap(_instance: *mut alt_ICheckpoint) -> *mut alt_RGBA;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IBlip {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IBlip(from: *mut alt_CRefCountable) -> *mut alt_IBlip;
}
extern "C" {
    pub fn alt_IBlip_to_alt_CRefCountable(from: *mut alt_IBlip) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IBlip_GetRefCount(_instance: *mut alt_IBlip) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IBlip_AddRef(_instance: *mut alt_IBlip);
}
extern "C" {
    pub fn alt_IBlip_RemoveRef(_instance: *mut alt_IBlip);
}
extern "C" {
    pub fn alt_IBlip_AddWeakRef(_instance: *mut alt_IBlip, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBlip_RemoveWeakRef(_instance: *mut alt_IBlip, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IBlip(from: *mut alt_IBaseObject) -> *mut alt_IBlip;
}
extern "C" {
    pub fn alt_IBlip_to_alt_IBaseObject(from: *mut alt_IBlip) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IBlip_GetType(_instance: *mut alt_IBlip) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IBlip_HasMetaData(_instance: *mut alt_IBlip, key: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_IBlip_GetMetaData(
        _instance: *mut alt_IBlip,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IBlip_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IBlip,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IBlip_SetMetaData(
        _instance: *mut alt_IBlip,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IBlip_DeleteMetaData(_instance: *mut alt_IBlip, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IWorldObject_to_alt_IBlip(from: *mut alt_IWorldObject) -> *mut alt_IBlip;
}
extern "C" {
    pub fn alt_IBlip_to_alt_IWorldObject(from: *mut alt_IBlip) -> *mut alt_IWorldObject;
}
extern "C" {
    pub fn alt_IBlip_GetPosition(
        _instance: *mut alt_IBlip,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IBlip_GetPosition_CAPI_Heap(
        _instance: *mut alt_IBlip,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_IBlip_SetPosition(
        _instance: *mut alt_IBlip,
        pos: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_IBlip_GetDimension(_instance: *mut alt_IBlip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alt_IBlip_SetDimension(_instance: *mut alt_IBlip, dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alt_IBlip_IsGlobal(_instance: *mut alt_IBlip) -> bool;
}
extern "C" {
    pub fn alt_IBlip_GetTarget(
        _instance: *mut alt_IBlip,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IBlip_GetTarget_CAPI_Heap(
        _instance: *mut alt_IBlip,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_IBlip_IsAttached(_instance: *mut alt_IBlip) -> bool;
}
extern "C" {
    pub fn alt_IBlip_AttachedTo(
        _instance: *mut alt_IBlip,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_IBlip_AttachedTo_CAPI_Heap(
        _instance: *mut alt_IBlip,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IBlip_BlipType {
    ALT_IBLIP_BLIPTYPE_VEHICLE = 1,
    ALT_IBLIP_BLIPTYPE_PED = 2,
    ALT_IBLIP_BLIPTYPE_OBJECT = 3,
    ALT_IBLIP_BLIPTYPE_DESTINATION = 4,
    ALT_IBLIP_BLIPTYPE_CONT = 5,
    ALT_IBLIP_BLIPTYPE_PICKUP_UNK = 6,
    ALT_IBLIP_BLIPTYPE_RADIUS = 7,
    ALT_IBLIP_BLIPTYPE_PICKUP = 8,
    ALT_IBLIP_BLIPTYPE_COP = 9,
    ALT_IBLIP_BLIPTYPE_AREA = 11,
    ALT_IBLIP_BLIPTYPE_GALLERY = 12,
    ALT_IBLIP_BLIPTYPE_PICKUP_OBJECT = 13,
}
extern "C" {
    pub fn alt_IBlip_GetBlipType(_instance: *mut alt_IBlip) -> alt_IBlip_BlipType;
}
extern "C" {
    pub fn alt_IBlip_SetSprite(_instance: *mut alt_IBlip, sprite: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alt_IBlip_SetColor(_instance: *mut alt_IBlip, color: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn alt_IBlip_SetRoute(_instance: *mut alt_IBlip, state: bool);
}
extern "C" {
    pub fn alt_IBlip_SetRouteColor(_instance: *mut alt_IBlip, color: ::std::os::raw::c_uchar);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IVoiceChannel {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_CRefCountable_to_alt_IVoiceChannel(
        from: *mut alt_CRefCountable,
    ) -> *mut alt_IVoiceChannel;
}
extern "C" {
    pub fn alt_IVoiceChannel_to_alt_CRefCountable(
        from: *mut alt_IVoiceChannel,
    ) -> *mut alt_CRefCountable;
}
extern "C" {
    pub fn alt_IVoiceChannel_GetRefCount(
        _instance: *mut alt_IVoiceChannel,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IVoiceChannel_AddRef(_instance: *mut alt_IVoiceChannel);
}
extern "C" {
    pub fn alt_IVoiceChannel_RemoveRef(_instance: *mut alt_IVoiceChannel);
}
extern "C" {
    pub fn alt_IVoiceChannel_AddWeakRef(_instance: *mut alt_IVoiceChannel, ref_: *mut alt_IWeakRef);
}
extern "C" {
    pub fn alt_IVoiceChannel_RemoveWeakRef(
        _instance: *mut alt_IVoiceChannel,
        ref_: *mut alt_IWeakRef,
    );
}
extern "C" {
    pub fn alt_IBaseObject_to_alt_IVoiceChannel(
        from: *mut alt_IBaseObject,
    ) -> *mut alt_IVoiceChannel;
}
extern "C" {
    pub fn alt_IVoiceChannel_to_alt_IBaseObject(
        from: *mut alt_IVoiceChannel,
    ) -> *mut alt_IBaseObject;
}
extern "C" {
    pub fn alt_IVoiceChannel_GetType(_instance: *mut alt_IVoiceChannel) -> alt_IBaseObject_Type;
}
extern "C" {
    pub fn alt_IVoiceChannel_HasMetaData(
        _instance: *mut alt_IVoiceChannel,
        key: *mut alt_StringView,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVoiceChannel_GetMetaData(
        _instance: *mut alt_IVoiceChannel,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_GetMetaData_CAPI_Heap(
        _instance: *mut alt_IVoiceChannel,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_IVoiceChannel_SetMetaData(
        _instance: *mut alt_IVoiceChannel,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_DeleteMetaData(
        _instance: *mut alt_IVoiceChannel,
        key: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_IsSpatial(_instance: *mut alt_IVoiceChannel) -> bool;
}
extern "C" {
    pub fn alt_IVoiceChannel_GetMaxDistance(_instance: *mut alt_IVoiceChannel) -> f32;
}
extern "C" {
    pub fn alt_IVoiceChannel_HasPlayer(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVoiceChannel_AddPlayer(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_RemovePlayer(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_IsPlayerMuted(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    ) -> bool;
}
extern "C" {
    pub fn alt_IVoiceChannel_MutePlayer(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_IVoiceChannel_UnmutePlayer(
        _instance: *mut alt_IVoiceChannel,
        player: *mut alt_RefBase_RefStore_IPlayer,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_RESOURCE_START = 3,
    ALT_CEVENT_TYPE_RESOURCE_STOP = 4,
    ALT_CEVENT_TYPE_RESOURCE_ERROR = 5,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 6,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 7,
    ALT_CEVENT_TYPE_META_CHANGE = 8,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 9,
    ALT_CEVENT_TYPE_STREAM_SYNCED_META_CHANGE = 10,
    ALT_CEVENT_TYPE_GLOBAL_META_CHANGE = 11,
    ALT_CEVENT_TYPE_GLOBAL_SYNCED_META_CHANGE = 12,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 13,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 14,
    ALT_CEVENT_TYPE_FIRE_EVENT = 15,
    ALT_CEVENT_TYPE_EXPLOSION_EVENT = 16,
    ALT_CEVENT_TYPE_WEAPON_DAMAGE_EVENT = 17,
    ALT_CEVENT_TYPE_VEHICLE_DESTROY = 18,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 19,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 20,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 21,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 22,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 23,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 24,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 25,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 26,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 27,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 28,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 29,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 30,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 31,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 32,
    ALT_CEVENT_TYPE_ALL = 33,
    ALT_CEVENT_TYPE_SIZE = 34,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
}
#[test]
fn bindgen_test_layout_alt_CEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CEvent>(),
        16usize,
        concat!("Size of: ", stringify!(alt_CEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CEvent>())).cancelled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CEvent),
            "::",
            stringify!(cancelled)
        )
    );
}
extern "C" {
    pub fn alt_CEvent_CAPI_Free(ptr: *mut alt_CEvent);
}
extern "C" {
    pub fn alt_CEvent_Create(_type: alt_CEvent_Type, _returnValue: *mut alt_CEvent);
}
extern "C" {
    pub fn alt_CEvent_Create_CAPI_Heap(_type: alt_CEvent_Type) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CEvent_GetType(_instance: *mut alt_CEvent) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CEvent_WasCancelled(_instance: *mut alt_CEvent) -> bool;
}
extern "C" {
    pub fn alt_CEvent_Cancel(_instance: *mut alt_CEvent);
}
extern "C" {
    pub fn alt_CEvent_Create_1(_p0: *mut alt_CEvent, _returnValue: *mut alt_CEvent);
}
extern "C" {
    pub fn alt_CEvent_Create_1_CAPI_Heap(_p0: *mut alt_CEvent) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CEvent_Assign_constCEventRef(_instance: *mut alt_CEvent, _p0: *mut alt_CEvent);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CServerScriptEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub name: alt_String,
    pub args: alt_Array_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CServerScriptEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CServerScriptEvent>(),
        56usize,
        concat!("Size of: ", stringify!(alt_CServerScriptEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CServerScriptEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CServerScriptEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CServerScriptEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CServerScriptEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CServerScriptEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CServerScriptEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CServerScriptEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CServerScriptEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CServerScriptEvent>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CServerScriptEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CServerScriptEvent>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CServerScriptEvent),
            "::",
            stringify!(args)
        )
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_CAPI_Free(ptr: *mut alt_CServerScriptEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CServerScriptEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_to_alt_CEvent(
        from: *mut alt_CServerScriptEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_GetType(
        _instance: *mut alt_CServerScriptEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CServerScriptEvent_WasCancelled(_instance: *mut alt_CServerScriptEvent) -> bool;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Cancel(_instance: *mut alt_CServerScriptEvent);
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Assign_constCEventRef(
        _instance: *mut alt_CServerScriptEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_2(
        _name: *mut alt_StringView,
        _args: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_2_CAPI_Heap(
        _name: *mut alt_StringView,
        _args: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_GetName(
        _instance: *mut alt_CServerScriptEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_GetName_CAPI_Heap(
        _instance: *mut alt_CServerScriptEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CServerScriptEvent_GetArgs(
        _instance: *mut alt_CServerScriptEvent,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_3(
        _p0: *mut alt_CServerScriptEvent,
        _returnValue: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CServerScriptEvent,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_4(
        _p0: *mut alt_CServerScriptEvent,
        _returnValue: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CServerScriptEvent,
    ) -> *mut alt_CServerScriptEvent;
}
extern "C" {
    pub fn alt_CServerScriptEvent_Assign_constCServerScriptEventRef(
        _instance: *mut alt_CServerScriptEvent,
        _p0: *mut alt_CServerScriptEvent,
    );
}
extern "C" {
    pub fn alt_CServerScriptEvent_Assign_CServerScriptEventRefRef(
        _instance: *mut alt_CServerScriptEvent,
        _p0: *mut alt_CServerScriptEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CClientScriptEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IPlayer,
    pub name: alt_String,
    pub args: alt_Array_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CClientScriptEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CClientScriptEvent>(),
        64usize,
        concat!("Size of: ", stringify!(alt_CClientScriptEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CClientScriptEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CClientScriptEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CClientScriptEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CClientScriptEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CClientScriptEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CClientScriptEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CClientScriptEvent>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CClientScriptEvent>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CClientScriptEvent),
            "::",
            stringify!(args)
        )
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_CAPI_Free(ptr: *mut alt_CClientScriptEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CClientScriptEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_to_alt_CEvent(
        from: *mut alt_CClientScriptEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetType(
        _instance: *mut alt_CClientScriptEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CClientScriptEvent_WasCancelled(_instance: *mut alt_CClientScriptEvent) -> bool;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Cancel(_instance: *mut alt_CClientScriptEvent);
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Assign_constCEventRef(
        _instance: *mut alt_CClientScriptEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _name: *mut alt_StringView,
        _args: *mut alt_Array_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _name: *mut alt_StringView,
        _args: *mut alt_Array_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetTarget(
        _instance: *mut alt_CClientScriptEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CClientScriptEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetName(
        _instance: *mut alt_CClientScriptEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetName_CAPI_Heap(
        _instance: *mut alt_CClientScriptEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CClientScriptEvent_GetArgs(
        _instance: *mut alt_CClientScriptEvent,
    ) -> *mut alt_Array_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_3(
        _p0: *mut alt_CClientScriptEvent,
        _returnValue: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CClientScriptEvent,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_4(
        _p0: *mut alt_CClientScriptEvent,
        _returnValue: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CClientScriptEvent,
    ) -> *mut alt_CClientScriptEvent;
}
extern "C" {
    pub fn alt_CClientScriptEvent_Assign_constCClientScriptEventRef(
        _instance: *mut alt_CClientScriptEvent,
        _p0: *mut alt_CClientScriptEvent,
    );
}
extern "C" {
    pub fn alt_CClientScriptEvent_Assign_CClientScriptEventRefRef(
        _instance: *mut alt_CClientScriptEvent,
        _p0: *mut alt_CClientScriptEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerConnectEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IPlayer,
    pub reason: alt_String,
}
#[test]
fn bindgen_test_layout_alt_CPlayerConnectEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerConnectEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerConnectEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerConnectEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerConnectEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerConnectEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerConnectEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerConnectEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerConnectEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerConnectEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerConnectEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerConnectEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerConnectEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerConnectEvent>())).reason as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerConnectEvent),
            "::",
            stringify!(reason)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_CAPI_Free(ptr: *mut alt_CPlayerConnectEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerConnectEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_to_alt_CEvent(
        from: *mut alt_CPlayerConnectEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_GetType(
        _instance: *mut alt_CPlayerConnectEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_WasCancelled(_instance: *mut alt_CPlayerConnectEvent) -> bool;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Cancel(_instance: *mut alt_CPlayerConnectEvent);
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerConnectEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _returnValue: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IPlayer,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_GetTarget(
        _instance: *mut alt_CPlayerConnectEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerConnectEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_GetReason(
        _instance: *mut alt_CPlayerConnectEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_GetReason_CAPI_Heap(
        _instance: *mut alt_CPlayerConnectEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Cancel_1(
        _instance: *mut alt_CPlayerConnectEvent,
        _reason: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_3(
        _p0: *mut alt_CPlayerConnectEvent,
        _returnValue: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerConnectEvent,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_4(
        _p0: *mut alt_CPlayerConnectEvent,
        _returnValue: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerConnectEvent,
    ) -> *mut alt_CPlayerConnectEvent;
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef(
        _instance: *mut alt_CPlayerConnectEvent,
        _p0: *mut alt_CPlayerConnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef(
        _instance: *mut alt_CPlayerConnectEvent,
        _p0: *mut alt_CPlayerConnectEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerDisconnectEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IPlayer,
    pub reason: alt_String,
}
#[test]
fn bindgen_test_layout_alt_CPlayerDisconnectEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerDisconnectEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerDisconnectEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerDisconnectEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerDisconnectEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDisconnectEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDisconnectEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDisconnectEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDisconnectEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDisconnectEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDisconnectEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDisconnectEvent>())).target as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDisconnectEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDisconnectEvent>())).reason as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDisconnectEvent),
            "::",
            stringify!(reason)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_CAPI_Free(ptr: *mut alt_CPlayerDisconnectEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerDisconnectEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_to_alt_CEvent(
        from: *mut alt_CPlayerDisconnectEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_GetType(
        _instance: *mut alt_CPlayerDisconnectEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_WasCancelled(
        _instance: *mut alt_CPlayerDisconnectEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Cancel(_instance: *mut alt_CPlayerDisconnectEvent);
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerDisconnectEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _reason: *mut alt_StringView,
        _returnValue: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _reason: *mut alt_StringView,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_GetTarget(
        _instance: *mut alt_CPlayerDisconnectEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerDisconnectEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_GetReason(
        _instance: *mut alt_CPlayerDisconnectEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_GetReason_CAPI_Heap(
        _instance: *mut alt_CPlayerDisconnectEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_3(
        _p0: *mut alt_CPlayerDisconnectEvent,
        _returnValue: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerDisconnectEvent,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_4(
        _p0: *mut alt_CPlayerDisconnectEvent,
        _returnValue: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerDisconnectEvent,
    ) -> *mut alt_CPlayerDisconnectEvent;
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef(
        _instance: *mut alt_CPlayerDisconnectEvent,
        _p0: *mut alt_CPlayerDisconnectEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef(
        _instance: *mut alt_CPlayerDisconnectEvent,
        _p0: *mut alt_CPlayerDisconnectEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerDamageEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IPlayer,
    pub attacker: alt_RefBase_RefStore_IEntity,
    pub damage: ::std::os::raw::c_ushort,
    pub weapon: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_alt_CPlayerDamageEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerDamageEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerDamageEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerDamageEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerDamageEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).attacker as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(attacker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).damage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(damage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDamageEvent>())).weapon as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDamageEvent),
            "::",
            stringify!(weapon)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_CAPI_Free(ptr: *mut alt_CPlayerDamageEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerDamageEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_to_alt_CEvent(
        from: *mut alt_CPlayerDamageEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetType(
        _instance: *mut alt_CPlayerDamageEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_WasCancelled(_instance: *mut alt_CPlayerDamageEvent) -> bool;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Cancel(_instance: *mut alt_CPlayerDamageEvent);
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerDamageEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _attacker: *mut alt_RefBase_RefStore_IEntity,
        _damage: ::std::os::raw::c_ushort,
        _weapon: ::std::os::raw::c_uint,
        _returnValue: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _attacker: *mut alt_RefBase_RefStore_IEntity,
        _damage: ::std::os::raw::c_ushort,
        _weapon: ::std::os::raw::c_uint,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetTarget(
        _instance: *mut alt_CPlayerDamageEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerDamageEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetAttacker(
        _instance: *mut alt_CPlayerDamageEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetAttacker_CAPI_Heap(
        _instance: *mut alt_CPlayerDamageEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetDamage(
        _instance: *mut alt_CPlayerDamageEvent,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_GetWeapon(
        _instance: *mut alt_CPlayerDamageEvent,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_3(
        _p0: *mut alt_CPlayerDamageEvent,
        _returnValue: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerDamageEvent,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_4(
        _p0: *mut alt_CPlayerDamageEvent,
        _returnValue: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerDamageEvent,
    ) -> *mut alt_CPlayerDamageEvent;
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef(
        _instance: *mut alt_CPlayerDamageEvent,
        _p0: *mut alt_CPlayerDamageEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDamageEvent_Assign_CPlayerDamageEventRefRef(
        _instance: *mut alt_CPlayerDamageEvent,
        _p0: *mut alt_CPlayerDamageEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerDeathEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IPlayer,
    pub killer: alt_RefBase_RefStore_IEntity,
    pub weapon: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_alt_CPlayerDeathEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerDeathEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerDeathEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerDeathEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerDeathEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).cancelled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).killer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(killer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CPlayerDeathEvent>())).weapon as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerDeathEvent),
            "::",
            stringify!(weapon)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_CAPI_Free(ptr: *mut alt_CPlayerDeathEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerDeathEvent(from: *mut alt_CEvent)
        -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_to_alt_CEvent(from: *mut alt_CPlayerDeathEvent)
        -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetType(_instance: *mut alt_CPlayerDeathEvent) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_WasCancelled(_instance: *mut alt_CPlayerDeathEvent) -> bool;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Cancel(_instance: *mut alt_CPlayerDeathEvent);
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerDeathEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _killer: *mut alt_RefBase_RefStore_IEntity,
        _weapon: ::std::os::raw::c_uint,
        _returnValue: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IPlayer,
        _killer: *mut alt_RefBase_RefStore_IEntity,
        _weapon: ::std::os::raw::c_uint,
    ) -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetTarget(
        _instance: *mut alt_CPlayerDeathEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerDeathEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetKiller(
        _instance: *mut alt_CPlayerDeathEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetKiller_CAPI_Heap(
        _instance: *mut alt_CPlayerDeathEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_GetWeapon(
        _instance: *mut alt_CPlayerDeathEvent,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_3(
        _p0: *mut alt_CPlayerDeathEvent,
        _returnValue: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerDeathEvent,
    ) -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_4(
        _p0: *mut alt_CPlayerDeathEvent,
        _returnValue: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerDeathEvent,
    ) -> *mut alt_CPlayerDeathEvent;
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef(
        _instance: *mut alt_CPlayerDeathEvent,
        _p0: *mut alt_CPlayerDeathEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerDeathEvent_Assign_CPlayerDeathEventRefRef(
        _instance: *mut alt_CPlayerDeathEvent,
        _p0: *mut alt_CPlayerDeathEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CColShapeEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IColShape,
    pub entity: alt_RefBase_RefStore_IEntity,
    pub state: bool,
}
#[test]
fn bindgen_test_layout_alt_CColShapeEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CColShapeEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CColShapeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CColShapeEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CColShapeEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).cancelled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).entity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CColShapeEvent>())).state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CColShapeEvent),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_CAPI_Free(ptr: *mut alt_CColShapeEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CColShapeEvent(from: *mut alt_CEvent) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_to_alt_CEvent(from: *mut alt_CColShapeEvent) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_Create(_type: alt_CEvent_Type, _returnValue: *mut alt_CColShapeEvent);
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_CAPI_Heap(_type: alt_CEvent_Type) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_GetType(_instance: *mut alt_CColShapeEvent) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CColShapeEvent_WasCancelled(_instance: *mut alt_CColShapeEvent) -> bool;
}
extern "C" {
    pub fn alt_CColShapeEvent_Cancel(_instance: *mut alt_CColShapeEvent);
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_1(_p0: *mut alt_CEvent, _returnValue: *mut alt_CColShapeEvent);
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_1_CAPI_Heap(_p0: *mut alt_CEvent) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_Assign_constCEventRef(
        _instance: *mut alt_CColShapeEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IColShape,
        _entity: *mut alt_RefBase_RefStore_IEntity,
        _state: bool,
        _returnValue: *mut alt_CColShapeEvent,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IColShape,
        _entity: *mut alt_RefBase_RefStore_IEntity,
        _state: bool,
    ) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_GetTarget(
        _instance: *mut alt_CColShapeEvent,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CColShapeEvent,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_CColShapeEvent_GetEntity(
        _instance: *mut alt_CColShapeEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_GetEntity_CAPI_Heap(
        _instance: *mut alt_CColShapeEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CColShapeEvent_GetState(_instance: *mut alt_CColShapeEvent) -> bool;
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_3(
        _p0: *mut alt_CColShapeEvent,
        _returnValue: *mut alt_CColShapeEvent,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CColShapeEvent,
    ) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_4(
        _p0: *mut alt_CColShapeEvent,
        _returnValue: *mut alt_CColShapeEvent,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CColShapeEvent,
    ) -> *mut alt_CColShapeEvent;
}
extern "C" {
    pub fn alt_CColShapeEvent_Assign_constCColShapeEventRef(
        _instance: *mut alt_CColShapeEvent,
        _p0: *mut alt_CColShapeEvent,
    );
}
extern "C" {
    pub fn alt_CColShapeEvent_Assign_CColShapeEventRefRef(
        _instance: *mut alt_CColShapeEvent,
        _p0: *mut alt_CColShapeEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerEnterVehicleEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IVehicle,
    pub player: alt_RefBase_RefStore_IPlayer,
    pub seat: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_alt_CPlayerEnterVehicleEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerEnterVehicleEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerEnterVehicleEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerEnterVehicleEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerEnterVehicleEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).target as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).player as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(player)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerEnterVehicleEvent>())).seat as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerEnterVehicleEvent),
            "::",
            stringify!(seat)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_CAPI_Free(ptr: *mut alt_CPlayerEnterVehicleEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerEnterVehicleEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_to_alt_CEvent(
        from: *mut alt_CPlayerEnterVehicleEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetType(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_WasCancelled(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Cancel(_instance: *mut alt_CPlayerEnterVehicleEvent);
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _seat: ::std::os::raw::c_uchar,
        _returnValue: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _seat: ::std::os::raw::c_uchar,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetTarget(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetPlayer(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetPlayer_CAPI_Heap(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_GetSeat(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_3(
        _p0: *mut alt_CPlayerEnterVehicleEvent,
        _returnValue: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerEnterVehicleEvent,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_4(
        _p0: *mut alt_CPlayerEnterVehicleEvent,
        _returnValue: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerEnterVehicleEvent,
    ) -> *mut alt_CPlayerEnterVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
        _p0: *mut alt_CPlayerEnterVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerEnterVehicleEvent_Assign_CPlayerEnterVehicleEventRefRef(
        _instance: *mut alt_CPlayerEnterVehicleEvent,
        _p0: *mut alt_CPlayerEnterVehicleEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerLeaveVehicleEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IVehicle,
    pub player: alt_RefBase_RefStore_IPlayer,
    pub seat: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_alt_CPlayerLeaveVehicleEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerLeaveVehicleEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerLeaveVehicleEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerLeaveVehicleEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CPlayerLeaveVehicleEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).target as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).player as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(player)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerLeaveVehicleEvent>())).seat as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerLeaveVehicleEvent),
            "::",
            stringify!(seat)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_CAPI_Free(ptr: *mut alt_CPlayerLeaveVehicleEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerLeaveVehicleEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_to_alt_CEvent(
        from: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetType(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_WasCancelled(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Cancel(_instance: *mut alt_CPlayerLeaveVehicleEvent);
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _seat: ::std::os::raw::c_uchar,
        _returnValue: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _seat: ::std::os::raw::c_uchar,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetTarget(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetPlayer(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetPlayer_CAPI_Heap(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_GetSeat(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_3(
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
        _returnValue: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_4(
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
        _returnValue: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
    ) -> *mut alt_CPlayerLeaveVehicleEvent;
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerLeaveVehicleEvent_Assign_CPlayerLeaveVehicleEventRefRef(
        _instance: *mut alt_CPlayerLeaveVehicleEvent,
        _p0: *mut alt_CPlayerLeaveVehicleEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CPlayerChangeVehicleSeatEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IVehicle,
    pub player: alt_RefBase_RefStore_IPlayer,
    pub oldSeat: ::std::os::raw::c_uchar,
    pub newSeat: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_alt_CPlayerChangeVehicleSeatEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CPlayerChangeVehicleSeatEvent>(),
        40usize,
        concat!("Size of: ", stringify!(alt_CPlayerChangeVehicleSeatEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CPlayerChangeVehicleSeatEvent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).vtable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).cancelled as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).target as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).player as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(player)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).oldSeat as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(oldSeat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CPlayerChangeVehicleSeatEvent>())).newSeat as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CPlayerChangeVehicleSeatEvent),
            "::",
            stringify!(newSeat)
        )
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_CAPI_Free(ptr: *mut alt_CPlayerChangeVehicleSeatEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CPlayerChangeVehicleSeatEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_to_alt_CEvent(
        from: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetType(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_WasCancelled(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Cancel(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _oldSeat: ::std::os::raw::c_uchar,
        _newSeat: ::std::os::raw::c_uchar,
        _returnValue: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _player: *mut alt_RefBase_RefStore_IPlayer,
        _oldSeat: ::std::os::raw::c_uchar,
        _newSeat: ::std::os::raw::c_uchar,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetTarget(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetPlayer(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetPlayer_CAPI_Heap(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_3(
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
        _returnValue: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_4(
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
        _returnValue: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
    ) -> *mut alt_CPlayerChangeVehicleSeatEvent;
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
extern "C" {
    pub fn alt_CPlayerChangeVehicleSeatEvent_Assign_CPlayerChangeVehicleSeatEventRefRef(
        _instance: *mut alt_CPlayerChangeVehicleSeatEvent,
        _p0: *mut alt_CPlayerChangeVehicleSeatEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CDataNodeReceivedEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub name: alt_String,
    pub json: alt_String,
}
#[test]
fn bindgen_test_layout_alt_CDataNodeReceivedEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CDataNodeReceivedEvent>(),
        48usize,
        concat!("Size of: ", stringify!(alt_CDataNodeReceivedEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CDataNodeReceivedEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CDataNodeReceivedEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CDataNodeReceivedEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CDataNodeReceivedEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CDataNodeReceivedEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CDataNodeReceivedEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CDataNodeReceivedEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CDataNodeReceivedEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CDataNodeReceivedEvent>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CDataNodeReceivedEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CDataNodeReceivedEvent>())).json as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CDataNodeReceivedEvent),
            "::",
            stringify!(json)
        )
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_CAPI_Free(ptr: *mut alt_CDataNodeReceivedEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CDataNodeReceivedEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_to_alt_CEvent(
        from: *mut alt_CDataNodeReceivedEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_GetType(
        _instance: *mut alt_CDataNodeReceivedEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_WasCancelled(
        _instance: *mut alt_CDataNodeReceivedEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Cancel(_instance: *mut alt_CDataNodeReceivedEvent);
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Assign_constCEventRef(
        _instance: *mut alt_CDataNodeReceivedEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_2(
        _name: *mut alt_StringView,
        _logJson: *mut alt_StringView,
        _returnValue: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_2_CAPI_Heap(
        _name: *mut alt_StringView,
        _logJson: *mut alt_StringView,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_GetName(
        _instance: *mut alt_CDataNodeReceivedEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_GetName_CAPI_Heap(
        _instance: *mut alt_CDataNodeReceivedEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_GetJson(
        _instance: *mut alt_CDataNodeReceivedEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_GetJson_CAPI_Heap(
        _instance: *mut alt_CDataNodeReceivedEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_3(
        _p0: *mut alt_CDataNodeReceivedEvent,
        _returnValue: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CDataNodeReceivedEvent,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_4(
        _p0: *mut alt_CDataNodeReceivedEvent,
        _returnValue: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CDataNodeReceivedEvent,
    ) -> *mut alt_CDataNodeReceivedEvent;
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef(
        _instance: *mut alt_CDataNodeReceivedEvent,
        _p0: *mut alt_CDataNodeReceivedEvent,
    );
}
extern "C" {
    pub fn alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef(
        _instance: *mut alt_CDataNodeReceivedEvent,
        _p0: *mut alt_CDataNodeReceivedEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CRemoveEntityEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IEntity,
}
#[test]
fn bindgen_test_layout_alt_CRemoveEntityEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CRemoveEntityEvent>(),
        24usize,
        concat!("Size of: ", stringify!(alt_CRemoveEntityEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CRemoveEntityEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CRemoveEntityEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CRemoveEntityEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CRemoveEntityEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CRemoveEntityEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CRemoveEntityEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CRemoveEntityEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CRemoveEntityEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CRemoveEntityEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CRemoveEntityEvent),
            "::",
            stringify!(target)
        )
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_CAPI_Free(ptr: *mut alt_CRemoveEntityEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CRemoveEntityEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_to_alt_CEvent(
        from: *mut alt_CRemoveEntityEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_GetType(
        _instance: *mut alt_CRemoveEntityEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_WasCancelled(_instance: *mut alt_CRemoveEntityEvent) -> bool;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Cancel(_instance: *mut alt_CRemoveEntityEvent);
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Assign_constCEventRef(
        _instance: *mut alt_CRemoveEntityEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IEntity,
        _returnValue: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_GetEntity(
        _instance: *mut alt_CRemoveEntityEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_GetEntity_CAPI_Heap(
        _instance: *mut alt_CRemoveEntityEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_3(
        _p0: *mut alt_CRemoveEntityEvent,
        _returnValue: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CRemoveEntityEvent,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_4(
        _p0: *mut alt_CRemoveEntityEvent,
        _returnValue: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CRemoveEntityEvent,
    ) -> *mut alt_CRemoveEntityEvent;
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef(
        _instance: *mut alt_CRemoveEntityEvent,
        _p0: *mut alt_CRemoveEntityEvent,
    );
}
extern "C" {
    pub fn alt_CRemoveEntityEvent_Assign_CRemoveEntityEventRefRef(
        _instance: *mut alt_CRemoveEntityEvent,
        _p0: *mut alt_CRemoveEntityEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CConsoleCommandEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub name: alt_StringView,
    pub args: alt_Array_StringView,
}
#[test]
fn bindgen_test_layout_alt_CConsoleCommandEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CConsoleCommandEvent>(),
        56usize,
        concat!("Size of: ", stringify!(alt_CConsoleCommandEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CConsoleCommandEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CConsoleCommandEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CConsoleCommandEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CConsoleCommandEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CConsoleCommandEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CConsoleCommandEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CConsoleCommandEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CConsoleCommandEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CConsoleCommandEvent>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CConsoleCommandEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CConsoleCommandEvent>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CConsoleCommandEvent),
            "::",
            stringify!(args)
        )
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_CAPI_Free(ptr: *mut alt_CConsoleCommandEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CConsoleCommandEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_to_alt_CEvent(
        from: *mut alt_CConsoleCommandEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_GetType(
        _instance: *mut alt_CConsoleCommandEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_WasCancelled(_instance: *mut alt_CConsoleCommandEvent) -> bool;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Cancel(_instance: *mut alt_CConsoleCommandEvent);
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Assign_constCEventRef(
        _instance: *mut alt_CConsoleCommandEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_2(
        _name: *mut alt_StringView,
        _args: *mut alt_Array_StringView,
        _returnValue: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_2_CAPI_Heap(
        _name: *mut alt_StringView,
        _args: *mut alt_Array_StringView,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_GetName(
        _instance: *mut alt_CConsoleCommandEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_GetName_CAPI_Heap(
        _instance: *mut alt_CConsoleCommandEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_GetArgs(
        _instance: *mut alt_CConsoleCommandEvent,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_3(
        _p0: *mut alt_CConsoleCommandEvent,
        _returnValue: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CConsoleCommandEvent,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_4(
        _p0: *mut alt_CConsoleCommandEvent,
        _returnValue: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CConsoleCommandEvent,
    ) -> *mut alt_CConsoleCommandEvent;
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef(
        _instance: *mut alt_CConsoleCommandEvent,
        _p0: *mut alt_CConsoleCommandEvent,
    );
}
extern "C" {
    pub fn alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef(
        _instance: *mut alt_CConsoleCommandEvent,
        _p0: *mut alt_CConsoleCommandEvent,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_CWeaponDamageEvent_BodyPart {
    ALT_CWEAPONDAMAGEEVENT_BODYPART_PELVIS = 0,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_HIP = 1,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_LEG = 2,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_FOOT = 3,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_HIP = 4,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_LEG = 5,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_FOOT = 6,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LOWER_TORSO = 7,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UPPER_TORSO = 8,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_CHEST = 9,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNDER_NECK = 10,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_SHOULDER = 11,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_UPPER_ARM = 12,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_ELBROW = 13,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_WRIST = 14,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_SHOULDER = 15,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_UPPER_ARM = 16,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_ELBROW = 17,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_WRIST = 18,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_NECK = 19,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_HEAD = 20,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNKNOWN = 255,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CWeaponDamageEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub source: alt_RefBase_RefStore_IPlayer,
    pub target: alt_RefBase_RefStore_IEntity,
    pub weaponHash: ::std::os::raw::c_uint,
    pub damageValue: ::std::os::raw::c_ushort,
    pub shotOffset: alt_Vector_float_3_VectorLayout_float_3,
    pub bodyPart: alt_CWeaponDamageEvent_BodyPart,
}
#[test]
fn bindgen_test_layout_alt_CWeaponDamageEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CWeaponDamageEvent>(),
        56usize,
        concat!("Size of: ", stringify!(alt_CWeaponDamageEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CWeaponDamageEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CWeaponDamageEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).target as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).weaponHash as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(weaponHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).damageValue as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(damageValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).shotOffset as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(shotOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CWeaponDamageEvent>())).bodyPart as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CWeaponDamageEvent),
            "::",
            stringify!(bodyPart)
        )
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_CAPI_Free(ptr: *mut alt_CWeaponDamageEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CWeaponDamageEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_to_alt_CEvent(
        from: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetType(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_WasCancelled(_instance: *mut alt_CWeaponDamageEvent) -> bool;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Cancel(_instance: *mut alt_CWeaponDamageEvent);
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Assign_constCEventRef(
        _instance: *mut alt_CWeaponDamageEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_2(
        _source: *mut alt_RefBase_RefStore_IPlayer,
        _target: *mut alt_RefBase_RefStore_IEntity,
        _weaponHash: ::std::os::raw::c_uint,
        _damageValue: ::std::os::raw::c_ushort,
        _shotOffset: *mut alt_Vector_float_3_VectorLayout_float_3,
        _bodyPart: alt_CWeaponDamageEvent_BodyPart,
        _returnValue: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_2_CAPI_Heap(
        _source: *mut alt_RefBase_RefStore_IPlayer,
        _target: *mut alt_RefBase_RefStore_IEntity,
        _weaponHash: ::std::os::raw::c_uint,
        _damageValue: ::std::os::raw::c_ushort,
        _shotOffset: *mut alt_Vector_float_3_VectorLayout_float_3,
        _bodyPart: alt_CWeaponDamageEvent_BodyPart,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetSource(
        _instance: *mut alt_CWeaponDamageEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetSource_CAPI_Heap(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetTarget(
        _instance: *mut alt_CWeaponDamageEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetWeaponHash(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetDamageValue(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetShotOffset(
        _instance: *mut alt_CWeaponDamageEvent,
        _returnValue: *mut alt_Vector_float_3_VectorLayout_float_3,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetShotOffset_CAPI_Heap(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_Vector_float_3_VectorLayout_float_3;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_GetBodyPart(
        _instance: *mut alt_CWeaponDamageEvent,
    ) -> alt_CWeaponDamageEvent_BodyPart;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_3(
        _p0: *mut alt_CWeaponDamageEvent,
        _returnValue: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_4(
        _p0: *mut alt_CWeaponDamageEvent,
        _returnValue: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CWeaponDamageEvent,
    ) -> *mut alt_CWeaponDamageEvent;
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Assign_constCWeaponDamageEventRef(
        _instance: *mut alt_CWeaponDamageEvent,
        _p0: *mut alt_CWeaponDamageEvent,
    );
}
extern "C" {
    pub fn alt_CWeaponDamageEvent_Assign_CWeaponDamageEventRefRef(
        _instance: *mut alt_CWeaponDamageEvent,
        _p0: *mut alt_CWeaponDamageEvent,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_CExplosionEvent_ExplosionType {
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADE = 0,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADELAUNCHER = 1,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_STICKYBOMB = 2,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_MOLOTOV = 3,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_ROCKET = 4,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKSHELL = 5,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_HI_OCTANE = 6,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_CAR = 7,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE = 8,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PETROL_PUMP = 9,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BIKE = 10,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_STEAM = 11,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME = 12,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_WATER_HYDRANT = 13,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_GAS_CANISTER = 14,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BOAT = 15,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SHIP_DESTROY = 16,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRUCK = 17,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BULLET = 18,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADELAUNCHER = 19,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADE = 20,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BZGAS = 21,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FLARE = 22,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_CANISTER = 23,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_EXTINGUISHER = 24,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROGRAMMABLEAR = 25,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRAIN = 26,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BARREL = 27,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROPANE = 28,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BLIMP = 29,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME_EXPLODE = 30,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKER = 31,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE_ROCKET = 32,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VEHICLE_BULLET = 33,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_TANK = 34,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FIREWORK = 35,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SNOWBALL = 36,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROXMINE = 37,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VALKYRIE_CANNON = 38,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_UNKNOWN = 255,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CExplosionEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub source: alt_RefBase_RefStore_IPlayer,
    pub explosionType: alt_CExplosionEvent_ExplosionType,
    pub position: alt_Vector_float_3_PointLayout,
    pub explosionFX: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_alt_CExplosionEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CExplosionEvent>(),
        48usize,
        concat!("Size of: ", stringify!(alt_CExplosionEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CExplosionEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CExplosionEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).cancelled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CExplosionEvent>())).explosionType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(explosionType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).position as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CExplosionEvent>())).explosionFX as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CExplosionEvent),
            "::",
            stringify!(explosionFX)
        )
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_CAPI_Free(ptr: *mut alt_CExplosionEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CExplosionEvent(from: *mut alt_CEvent) -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_to_alt_CEvent(from: *mut alt_CExplosionEvent) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_CAPI_Heap(_type: alt_CEvent_Type)
        -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_GetType(_instance: *mut alt_CExplosionEvent) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CExplosionEvent_WasCancelled(_instance: *mut alt_CExplosionEvent) -> bool;
}
extern "C" {
    pub fn alt_CExplosionEvent_Cancel(_instance: *mut alt_CExplosionEvent);
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_1_CAPI_Heap(_p0: *mut alt_CEvent)
        -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_Assign_constCEventRef(
        _instance: *mut alt_CExplosionEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_2(
        _source: *mut alt_RefBase_RefStore_IPlayer,
        _explosionType: alt_CExplosionEvent_ExplosionType,
        _position: *mut alt_Vector_float_3_PointLayout,
        _explosionFX: ::std::os::raw::c_uint,
        _returnValue: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_2_CAPI_Heap(
        _source: *mut alt_RefBase_RefStore_IPlayer,
        _explosionType: alt_CExplosionEvent_ExplosionType,
        _position: *mut alt_Vector_float_3_PointLayout,
        _explosionFX: ::std::os::raw::c_uint,
    ) -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_GetSource(
        _instance: *mut alt_CExplosionEvent,
        _returnValue: *mut alt_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_GetSource_CAPI_Heap(
        _instance: *mut alt_CExplosionEvent,
    ) -> *mut alt_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_CExplosionEvent_GetExplosionType(
        _instance: *mut alt_CExplosionEvent,
    ) -> alt_CExplosionEvent_ExplosionType;
}
extern "C" {
    pub fn alt_CExplosionEvent_GetPosition(
        _instance: *mut alt_CExplosionEvent,
        _returnValue: *mut alt_Vector_float_3_PointLayout,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_GetPosition_CAPI_Heap(
        _instance: *mut alt_CExplosionEvent,
    ) -> *mut alt_Vector_float_3_PointLayout;
}
extern "C" {
    pub fn alt_CExplosionEvent_GetExplosionFX(
        _instance: *mut alt_CExplosionEvent,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_3(
        _p0: *mut alt_CExplosionEvent,
        _returnValue: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CExplosionEvent,
    ) -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_4(
        _p0: *mut alt_CExplosionEvent,
        _returnValue: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CExplosionEvent,
    ) -> *mut alt_CExplosionEvent;
}
extern "C" {
    pub fn alt_CExplosionEvent_Assign_constCExplosionEventRef(
        _instance: *mut alt_CExplosionEvent,
        _p0: *mut alt_CExplosionEvent,
    );
}
extern "C" {
    pub fn alt_CExplosionEvent_Assign_CExplosionEventRefRef(
        _instance: *mut alt_CExplosionEvent,
        _p0: *mut alt_CExplosionEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IResource {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IResource() {
    assert_eq!(
        ::std::mem::size_of::<alt_IResource>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IResource))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IResource>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IResource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IResource>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IResource_GetRuntime(_instance: *mut alt_IResource) -> *mut alt_IScriptRuntime;
}
extern "C" {
    pub fn alt_IResource_GetImpl(_instance: *mut alt_IResource) -> *mut alt_IResource_Impl;
}
extern "C" {
    pub fn alt_IResource_IsStarted(_instance: *mut alt_IResource) -> bool;
}
extern "C" {
    pub fn alt_IResource_GetType(_instance: *mut alt_IResource, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IResource_GetType_CAPI_Heap(_instance: *mut alt_IResource) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IResource_GetName(_instance: *mut alt_IResource, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IResource_GetName_CAPI_Heap(_instance: *mut alt_IResource) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IResource_GetPath(_instance: *mut alt_IResource, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IResource_GetPath_CAPI_Heap(_instance: *mut alt_IResource) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IResource_GetMain(_instance: *mut alt_IResource, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_IResource_GetMain_CAPI_Heap(_instance: *mut alt_IResource) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_IResource_GetPackage(_instance: *mut alt_IResource) -> *mut alt_IPackage;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueDict {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_IResource_GetExports(
        _instance: *mut alt_IResource,
        _returnValue: *mut alt_RefBase_RefStore_IMValueDict,
    );
}
extern "C" {
    pub fn alt_IResource_GetExports_CAPI_Heap(
        _instance: *mut alt_IResource,
    ) -> *mut alt_RefBase_RefStore_IMValueDict;
}
extern "C" {
    pub fn alt_IResource_GetDependencies(
        _instance: *mut alt_IResource,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_IResource_GetDependencies_CAPI_Heap(
        _instance: *mut alt_IResource,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_IResource_GetDependants(
        _instance: *mut alt_IResource,
        _returnValue: *mut alt_Array_StringView,
    );
}
extern "C" {
    pub fn alt_IResource_GetDependants_CAPI_Heap(
        _instance: *mut alt_IResource,
    ) -> *mut alt_Array_StringView;
}
extern "C" {
    pub fn alt_IResource_SetExports(
        _instance: *mut alt_IResource,
        exports: *mut alt_RefBase_RefStore_IMValueDict,
    );
}
extern "C" {
    pub fn alt_IResource_Assign_constIResourceRef(
        _instance: *mut alt_IResource,
        _p0: *mut alt_IResource,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IResource_CreationInfo {
    pub type_: alt_String,
    pub name: alt_String,
    pub main: alt_String,
    pub pkg: *mut alt_IPackage,
}
#[test]
fn bindgen_test_layout_alt_IResource_CreationInfo() {
    assert_eq!(
        ::std::mem::size_of::<alt_IResource_CreationInfo>(),
        56usize,
        concat!("Size of: ", stringify!(alt_IResource_CreationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IResource_CreationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IResource_CreationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_IResource_CreationInfo>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource_CreationInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IResource_CreationInfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource_CreationInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IResource_CreationInfo>())).main as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource_CreationInfo),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IResource_CreationInfo>())).pkg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource_CreationInfo),
            "::",
            stringify!(pkg)
        )
    );
}
extern "C" {
    pub fn alt_IResource_CreationInfo_CAPI_Free(ptr: *mut alt_IResource_CreationInfo);
}
extern "C" {
    pub fn alt_IResource_CreationInfo_Create(
        _p0: *mut alt_IResource_CreationInfo,
        _returnValue: *mut alt_IResource_CreationInfo,
    );
}
extern "C" {
    pub fn alt_IResource_CreationInfo_Create_CAPI_Heap(
        _p0: *mut alt_IResource_CreationInfo,
    ) -> *mut alt_IResource_CreationInfo;
}
extern "C" {
    pub fn alt_IResource_CreationInfo_Create_1(
        _p0: *mut alt_IResource_CreationInfo,
        _returnValue: *mut alt_IResource_CreationInfo,
    );
}
extern "C" {
    pub fn alt_IResource_CreationInfo_Create_1_CAPI_Heap(
        _p0: *mut alt_IResource_CreationInfo,
    ) -> *mut alt_IResource_CreationInfo;
}
extern "C" {
    pub fn alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef(
        _instance: *mut alt_IResource_CreationInfo,
        _p0: *mut alt_IResource_CreationInfo,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IResource_Impl {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IResource_Impl() {
    assert_eq!(
        ::std::mem::size_of::<alt_IResource_Impl>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IResource_Impl))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IResource_Impl>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IResource_Impl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IResource_Impl>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IResource_Impl),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IResource_Impl_CAPI_Free(ptr: *mut alt_IResource_Impl);
}
extern "C" {
    pub fn alt_IResource_Impl_MakeClient(
        _instance: *mut alt_IResource_Impl,
        info: *mut alt_IResource_CreationInfo,
        files: *mut alt_Array_String,
    ) -> bool;
}
extern "C" {
    pub fn alt_IResource_Impl_Start(_instance: *mut alt_IResource_Impl) -> bool;
}
extern "C" {
    pub fn alt_IResource_Impl_Stop(_instance: *mut alt_IResource_Impl) -> bool;
}
extern "C" {
    pub fn alt_IResource_Impl_OnEvent(
        _instance: *mut alt_IResource_Impl,
        ev: *mut alt_CEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_IResource_Impl_OnTick(_instance: *mut alt_IResource_Impl);
}
extern "C" {
    pub fn alt_IResource_Impl_OnCreateBaseObject(
        _instance: *mut alt_IResource_Impl,
        object: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_IResource_Impl_OnRemoveBaseObject(
        _instance: *mut alt_IResource_Impl,
        object: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_IResource_Impl_Assign_constIResource_ImplRef(
        _instance: *mut alt_IResource_Impl,
        _p0: *mut alt_IResource_Impl,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CResourceStartEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub resource: *mut alt_IResource,
}
#[test]
fn bindgen_test_layout_alt_CResourceStartEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CResourceStartEvent>(),
        24usize,
        concat!("Size of: ", stringify!(alt_CResourceStartEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CResourceStartEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CResourceStartEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceStartEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStartEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceStartEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStartEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CResourceStartEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStartEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CResourceStartEvent>())).resource as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStartEvent),
            "::",
            stringify!(resource)
        )
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_CAPI_Free(ptr: *mut alt_CResourceStartEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CResourceStartEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_to_alt_CEvent(
        from: *mut alt_CResourceStartEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_GetType(
        _instance: *mut alt_CResourceStartEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CResourceStartEvent_WasCancelled(_instance: *mut alt_CResourceStartEvent) -> bool;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Cancel(_instance: *mut alt_CResourceStartEvent);
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Assign_constCEventRef(
        _instance: *mut alt_CResourceStartEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_2(
        _resource: *mut alt_IResource,
        _returnValue: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_2_CAPI_Heap(
        _resource: *mut alt_IResource,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_GetResource(
        _instance: *mut alt_CResourceStartEvent,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_3(
        _p0: *mut alt_CResourceStartEvent,
        _returnValue: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CResourceStartEvent,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_4(
        _p0: *mut alt_CResourceStartEvent,
        _returnValue: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CResourceStartEvent,
    ) -> *mut alt_CResourceStartEvent;
}
extern "C" {
    pub fn alt_CResourceStartEvent_Assign_constCResourceStartEventRef(
        _instance: *mut alt_CResourceStartEvent,
        _p0: *mut alt_CResourceStartEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStartEvent_Assign_CResourceStartEventRefRef(
        _instance: *mut alt_CResourceStartEvent,
        _p0: *mut alt_CResourceStartEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CResourceStopEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub resource: *mut alt_IResource,
}
#[test]
fn bindgen_test_layout_alt_CResourceStopEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CResourceStopEvent>(),
        24usize,
        concat!("Size of: ", stringify!(alt_CResourceStopEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CResourceStopEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CResourceStopEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceStopEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStopEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceStopEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStopEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CResourceStopEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStopEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceStopEvent>())).resource as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceStopEvent),
            "::",
            stringify!(resource)
        )
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_CAPI_Free(ptr: *mut alt_CResourceStopEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CResourceStopEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_to_alt_CEvent(
        from: *mut alt_CResourceStopEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_GetType(
        _instance: *mut alt_CResourceStopEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CResourceStopEvent_WasCancelled(_instance: *mut alt_CResourceStopEvent) -> bool;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Cancel(_instance: *mut alt_CResourceStopEvent);
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Assign_constCEventRef(
        _instance: *mut alt_CResourceStopEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_2(
        _resource: *mut alt_IResource,
        _returnValue: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_2_CAPI_Heap(
        _resource: *mut alt_IResource,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_GetResource(
        _instance: *mut alt_CResourceStopEvent,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_3(
        _p0: *mut alt_CResourceStopEvent,
        _returnValue: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CResourceStopEvent,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_4(
        _p0: *mut alt_CResourceStopEvent,
        _returnValue: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CResourceStopEvent,
    ) -> *mut alt_CResourceStopEvent;
}
extern "C" {
    pub fn alt_CResourceStopEvent_Assign_constCResourceStopEventRef(
        _instance: *mut alt_CResourceStopEvent,
        _p0: *mut alt_CResourceStopEvent,
    );
}
extern "C" {
    pub fn alt_CResourceStopEvent_Assign_CResourceStopEventRefRef(
        _instance: *mut alt_CResourceStopEvent,
        _p0: *mut alt_CResourceStopEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CResourceErrorEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub resource: *mut alt_IResource,
}
#[test]
fn bindgen_test_layout_alt_CResourceErrorEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CResourceErrorEvent>(),
        24usize,
        concat!("Size of: ", stringify!(alt_CResourceErrorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CResourceErrorEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CResourceErrorEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceErrorEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceErrorEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CResourceErrorEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceErrorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CResourceErrorEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceErrorEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CResourceErrorEvent>())).resource as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CResourceErrorEvent),
            "::",
            stringify!(resource)
        )
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_CAPI_Free(ptr: *mut alt_CResourceErrorEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CResourceErrorEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_to_alt_CEvent(
        from: *mut alt_CResourceErrorEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_GetType(
        _instance: *mut alt_CResourceErrorEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_WasCancelled(_instance: *mut alt_CResourceErrorEvent) -> bool;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Cancel(_instance: *mut alt_CResourceErrorEvent);
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Assign_constCEventRef(
        _instance: *mut alt_CResourceErrorEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_2(
        _resource: *mut alt_IResource,
        _returnValue: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_2_CAPI_Heap(
        _resource: *mut alt_IResource,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_GetResource(
        _instance: *mut alt_CResourceErrorEvent,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_3(
        _p0: *mut alt_CResourceErrorEvent,
        _returnValue: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CResourceErrorEvent,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_4(
        _p0: *mut alt_CResourceErrorEvent,
        _returnValue: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CResourceErrorEvent,
    ) -> *mut alt_CResourceErrorEvent;
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Assign_constCResourceErrorEventRef(
        _instance: *mut alt_CResourceErrorEvent,
        _p0: *mut alt_CResourceErrorEvent,
    );
}
extern "C" {
    pub fn alt_CResourceErrorEvent_Assign_CResourceErrorEventRefRef(
        _instance: *mut alt_CResourceErrorEvent,
        _p0: *mut alt_CResourceErrorEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CSyncedMetaDataChangeEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IEntity,
    pub key: alt_String,
    pub val: alt_RefBase_RefStore_constIMValue,
    pub oldVal: alt_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CSyncedMetaDataChangeEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CSyncedMetaDataChangeEvent>(),
        56usize,
        concat!("Size of: ", stringify!(alt_CSyncedMetaDataChangeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CSyncedMetaDataChangeEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CSyncedMetaDataChangeEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).cancelled as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).target as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).key as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).val as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CSyncedMetaDataChangeEvent>())).oldVal as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CSyncedMetaDataChangeEvent),
            "::",
            stringify!(oldVal)
        )
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_CAPI_Free(ptr: *mut alt_CSyncedMetaDataChangeEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CSyncedMetaDataChangeEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_to_alt_CEvent(
        from: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetType(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_WasCancelled(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Cancel(_instance: *mut alt_CSyncedMetaDataChangeEvent);
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Assign_constCEventRef(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IEntity,
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IEntity,
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetTarget(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetKey(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetVal(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetOldVal(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_3(
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_4(
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
    ) -> *mut alt_CSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Assign_constCSyncedMetaDataChangeEventRef(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CSyncedMetaDataChangeEvent_Assign_CSyncedMetaDataChangeEventRefRef(
        _instance: *mut alt_CSyncedMetaDataChangeEvent,
        _p0: *mut alt_CSyncedMetaDataChangeEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CStreamSyncedMetaDataChangeEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IEntity,
    pub key: alt_String,
    pub val: alt_RefBase_RefStore_constIMValue,
    pub oldVal: alt_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CStreamSyncedMetaDataChangeEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CStreamSyncedMetaDataChangeEvent>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CStreamSyncedMetaDataChangeEvent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).vtable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).type_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).cancelled as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).target as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).key as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).val as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CStreamSyncedMetaDataChangeEvent>())).oldVal as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CStreamSyncedMetaDataChangeEvent),
            "::",
            stringify!(oldVal)
        )
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free(
        ptr: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CEvent_to_alt_CStreamSyncedMetaDataChangeEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_to_alt_CEvent(
        from: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetType(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_WasCancelled(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Cancel(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Assign_constCEventRef(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IEntity,
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IEntity,
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetTarget(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetKey(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetVal(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetOldVal(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_3(
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_4(
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
    ) -> *mut alt_CStreamSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Assign_constCStreamSyncedMetaDataChangeEventRef(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CStreamSyncedMetaDataChangeEvent_Assign_CStreamSyncedMetaDataChangeEventRefRef(
        _instance: *mut alt_CStreamSyncedMetaDataChangeEvent,
        _p0: *mut alt_CStreamSyncedMetaDataChangeEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CGlobalMetaDataChangeEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub key: alt_String,
    pub val: alt_RefBase_RefStore_constIMValue,
    pub oldVal: alt_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CGlobalMetaDataChangeEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CGlobalMetaDataChangeEvent>(),
        48usize,
        concat!("Size of: ", stringify!(alt_CGlobalMetaDataChangeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CGlobalMetaDataChangeEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CGlobalMetaDataChangeEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).cancelled as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).key as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).val as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalMetaDataChangeEvent>())).oldVal as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalMetaDataChangeEvent),
            "::",
            stringify!(oldVal)
        )
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_CAPI_Free(ptr: *mut alt_CGlobalMetaDataChangeEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CGlobalMetaDataChangeEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_to_alt_CEvent(
        from: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetType(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_WasCancelled(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Cancel(_instance: *mut alt_CGlobalMetaDataChangeEvent);
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Assign_constCEventRef(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_2(
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_2_CAPI_Heap(
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetKey(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetKey_CAPI_Heap(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetVal(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetVal_CAPI_Heap(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetOldVal(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_GetOldVal_CAPI_Heap(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_3(
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
        _returnValue: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_4(
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
        _returnValue: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
    ) -> *mut alt_CGlobalMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Assign_constCGlobalMetaDataChangeEventRef(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalMetaDataChangeEvent_Assign_CGlobalMetaDataChangeEventRefRef(
        _instance: *mut alt_CGlobalMetaDataChangeEvent,
        _p0: *mut alt_CGlobalMetaDataChangeEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CGlobalSyncedMetaDataChangeEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub key: alt_String,
    pub val: alt_RefBase_RefStore_constIMValue,
    pub oldVal: alt_RefBase_RefStore_constIMValue,
}
#[test]
fn bindgen_test_layout_alt_CGlobalSyncedMetaDataChangeEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CGlobalSyncedMetaDataChangeEvent>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CGlobalSyncedMetaDataChangeEvent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).vtable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).type_ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).cancelled as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).key as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).val as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CGlobalSyncedMetaDataChangeEvent>())).oldVal as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CGlobalSyncedMetaDataChangeEvent),
            "::",
            stringify!(oldVal)
        )
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free(
        ptr: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CEvent_to_alt_CGlobalSyncedMetaDataChangeEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_to_alt_CEvent(
        from: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetType(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_WasCancelled(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> bool;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Cancel(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Assign_constCEventRef(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_2(
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
        _returnValue: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(
        _key: *mut alt_StringView,
        _val: *mut alt_RefBase_RefStore_constIMValue,
        _oldVal: *mut alt_RefBase_RefStore_constIMValue,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetKey(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_StringView,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetVal(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetOldVal(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_3(
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_4(
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _returnValue: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    ) -> *mut alt_CGlobalSyncedMetaDataChangeEvent;
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Assign_constCGlobalSyncedMetaDataChangeEventRef(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
extern "C" {
    pub fn alt_CGlobalSyncedMetaDataChangeEvent_Assign_CGlobalSyncedMetaDataChangeEventRefRef(
        _instance: *mut alt_CGlobalSyncedMetaDataChangeEvent,
        _p0: *mut alt_CGlobalSyncedMetaDataChangeEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_CVehicleDestroyEvent {
    pub vtable: *mut ::std::os::raw::c_void,
    pub type_: alt_CEvent_Type,
    pub cancelled: bool,
    pub target: alt_RefBase_RefStore_IVehicle,
}
#[test]
fn bindgen_test_layout_alt_CVehicleDestroyEvent() {
    assert_eq!(
        ::std::mem::size_of::<alt_CVehicleDestroyEvent>(),
        24usize,
        concat!("Size of: ", stringify!(alt_CVehicleDestroyEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_CVehicleDestroyEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_CVehicleDestroyEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CVehicleDestroyEvent>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CVehicleDestroyEvent),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CVehicleDestroyEvent>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CVehicleDestroyEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<alt_CVehicleDestroyEvent>())).cancelled as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CVehicleDestroyEvent),
            "::",
            stringify!(cancelled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_CVehicleDestroyEvent>())).target as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_CVehicleDestroyEvent),
            "::",
            stringify!(target)
        )
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_CAPI_Free(ptr: *mut alt_CVehicleDestroyEvent);
}
extern "C" {
    pub fn alt_CEvent_to_alt_CVehicleDestroyEvent(
        from: *mut alt_CEvent,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_to_alt_CEvent(
        from: *mut alt_CVehicleDestroyEvent,
    ) -> *mut alt_CEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create(
        _type: alt_CEvent_Type,
        _returnValue: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_CAPI_Heap(
        _type: alt_CEvent_Type,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_GetType(
        _instance: *mut alt_CVehicleDestroyEvent,
    ) -> alt_CEvent_Type;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_WasCancelled(_instance: *mut alt_CVehicleDestroyEvent) -> bool;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Cancel(_instance: *mut alt_CVehicleDestroyEvent);
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_1(
        _p0: *mut alt_CEvent,
        _returnValue: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_1_CAPI_Heap(
        _p0: *mut alt_CEvent,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Assign_constCEventRef(
        _instance: *mut alt_CVehicleDestroyEvent,
        _p0: *mut alt_CEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_2(
        _target: *mut alt_RefBase_RefStore_IVehicle,
        _returnValue: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_2_CAPI_Heap(
        _target: *mut alt_RefBase_RefStore_IVehicle,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_GetTarget(
        _instance: *mut alt_CVehicleDestroyEvent,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_GetTarget_CAPI_Heap(
        _instance: *mut alt_CVehicleDestroyEvent,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_3(
        _p0: *mut alt_CVehicleDestroyEvent,
        _returnValue: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_3_CAPI_Heap(
        _p0: *mut alt_CVehicleDestroyEvent,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_4(
        _p0: *mut alt_CVehicleDestroyEvent,
        _returnValue: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Create_4_CAPI_Heap(
        _p0: *mut alt_CVehicleDestroyEvent,
    ) -> *mut alt_CVehicleDestroyEvent;
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Assign_constCVehicleDestroyEventRef(
        _instance: *mut alt_CVehicleDestroyEvent,
        _p0: *mut alt_CVehicleDestroyEvent,
    );
}
extern "C" {
    pub fn alt_CVehicleDestroyEvent_Assign_CVehicleDestroyEventRefRef(
        _instance: *mut alt_CVehicleDestroyEvent,
        _p0: *mut alt_CVehicleDestroyEvent,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IPackage {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IPackage() {
    assert_eq!(
        ::std::mem::size_of::<alt_IPackage>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IPackage))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IPackage>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IPackage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IPackage>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IPackage),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IPackage_CAPI_Free(ptr: *mut alt_IPackage);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IPackage_Mode {
    ALT_IPACKAGE_MODE_READ = 0,
    ALT_IPACKAGE_MODE_WRITE = 1,
}
extern "C" {
    pub fn alt_IPackage_GetMode(_instance: *mut alt_IPackage) -> alt_IPackage_Mode;
}
extern "C" {
    pub fn alt_IPackage_FileExists(_instance: *mut alt_IPackage, path: *mut alt_StringView)
        -> bool;
}
extern "C" {
    pub fn alt_IPackage_OpenFile(
        _instance: *mut alt_IPackage,
        path: *mut alt_StringView,
    ) -> *mut alt_IPackage_File;
}
extern "C" {
    pub fn alt_IPackage_CloseFile(_instance: *mut alt_IPackage, file: *mut alt_IPackage_File);
}
extern "C" {
    pub fn alt_IPackage_GetFileSize(
        _instance: *mut alt_IPackage,
        file: *mut alt_IPackage_File,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_IPackage_SeekOrigin {
    ALT_IPACKAGE_SEEKORIGIN_SET = 0,
    ALT_IPACKAGE_SEEKORIGIN_CUR = 1,
    ALT_IPACKAGE_SEEKORIGIN_END = 2,
}
extern "C" {
    pub fn alt_IPackage_SeekFile(
        _instance: *mut alt_IPackage,
        file: *mut alt_IPackage_File,
        offset: ::std::os::raw::c_ulonglong,
        origin: alt_IPackage_SeekOrigin,
    );
}
extern "C" {
    pub fn alt_IPackage_TellFile(
        _instance: *mut alt_IPackage,
        file: *mut alt_IPackage_File,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPackage_ReadFile(
        _instance: *mut alt_IPackage,
        file: *mut alt_IPackage_File,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_IPackage_WriteFile(
        _instance: *mut alt_IPackage,
        file: *mut alt_IPackage_File,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IPackage_File {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IPackage_File() {
    assert_eq!(
        ::std::mem::size_of::<alt_IPackage_File>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IPackage_File))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IPackage_File>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IPackage_File))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IPackage_File>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IPackage_File),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IPackage_File_CAPI_Free(ptr: *mut alt_IPackage_File);
}
extern "C" {
    pub fn alt_IPackage_File_Assign_constIPackage_FileRef(
        _instance: *mut alt_IPackage_File,
        _p0: *mut alt_IPackage_File,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IScriptRuntime {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_IScriptRuntime() {
    assert_eq!(
        ::std::mem::size_of::<alt_IScriptRuntime>(),
        8usize,
        concat!("Size of: ", stringify!(alt_IScriptRuntime))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_IScriptRuntime>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_IScriptRuntime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_IScriptRuntime>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_IScriptRuntime),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_IScriptRuntime_CAPI_Free(ptr: *mut alt_IScriptRuntime);
}
extern "C" {
    pub fn alt_IScriptRuntime_RequiresMain(_instance: *mut alt_IScriptRuntime) -> bool;
}
extern "C" {
    pub fn alt_IScriptRuntime_CreateImpl(
        _instance: *mut alt_IScriptRuntime,
        resource: *mut alt_IResource,
    ) -> *mut alt_IResource_Impl;
}
extern "C" {
    pub fn alt_IScriptRuntime_DestroyImpl(
        _instance: *mut alt_IScriptRuntime,
        impl_: *mut alt_IResource_Impl,
    );
}
extern "C" {
    pub fn alt_IScriptRuntime_OnTick(_instance: *mut alt_IScriptRuntime);
}
extern "C" {
    pub fn alt_IScriptRuntime_OnDispose(_instance: *mut alt_IScriptRuntime);
}
extern "C" {
    pub fn alt_IScriptRuntime_Assign_constIScriptRuntimeRef(
        _instance: *mut alt_IScriptRuntime,
        _p0: *mut alt_IScriptRuntime,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_KeyState {
    pub down: bool,
    pub toggled: bool,
}
#[test]
fn bindgen_test_layout_alt_KeyState() {
    assert_eq!(
        ::std::mem::size_of::<alt_KeyState>(),
        2usize,
        concat!("Size of: ", stringify!(alt_KeyState))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_KeyState>(),
        1usize,
        concat!("Alignment of ", stringify!(alt_KeyState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_KeyState>())).down as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_KeyState),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_KeyState>())).toggled as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_KeyState),
            "::",
            stringify!(toggled)
        )
    );
}
extern "C" {
    pub fn alt_KeyState_CAPI_Free(ptr: *mut alt_KeyState);
}
extern "C" {
    pub fn alt_KeyState_Create(down: bool, toggled: bool, _returnValue: *mut alt_KeyState);
}
extern "C" {
    pub fn alt_KeyState_Create_CAPI_Heap(down: bool, toggled: bool) -> *mut alt_KeyState;
}
extern "C" {
    pub fn alt_KeyState_IsDown(_instance: *mut alt_KeyState) -> bool;
}
extern "C" {
    pub fn alt_KeyState_IsToggled(_instance: *mut alt_KeyState) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_ICore {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_ICore() {
    assert_eq!(
        ::std::mem::size_of::<alt_ICore>(),
        8usize,
        concat!("Size of: ", stringify!(alt_ICore))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_ICore>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_ICore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_ICore>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_ICore),
            "::",
            stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn alt_ICore_LogInfo(_instance: *mut alt_ICore, str: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_LogDebug(_instance: *mut alt_ICore, str: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_LogWarning(_instance: *mut alt_ICore, str: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_LogError(_instance: *mut alt_ICore, str: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_LogColored(_instance: *mut alt_ICore, str: *mut alt_StringView);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueNone {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueNone(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_RefBase_RefStore_IMValueNone,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueNone_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_RefBase_RefStore_IMValueNone;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueNil {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueNil(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_RefBase_RefStore_IMValueNil,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueNil_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_RefBase_RefStore_IMValueNil;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueBool {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueBool(
        _instance: *mut alt_ICore,
        val: bool,
        _returnValue: *mut alt_RefBase_RefStore_IMValueBool,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueBool_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: bool,
    ) -> *mut alt_RefBase_RefStore_IMValueBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueInt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueInt(
        _instance: *mut alt_ICore,
        val: ::std::os::raw::c_longlong,
        _returnValue: *mut alt_RefBase_RefStore_IMValueInt,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueInt_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: ::std::os::raw::c_longlong,
    ) -> *mut alt_RefBase_RefStore_IMValueInt;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueUInt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueUInt(
        _instance: *mut alt_ICore,
        val: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_IMValueUInt,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueUInt_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_IMValueUInt;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueDouble {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueDouble(
        _instance: *mut alt_ICore,
        val: f64,
        _returnValue: *mut alt_RefBase_RefStore_IMValueDouble,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueDouble_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: f64,
    ) -> *mut alt_RefBase_RefStore_IMValueDouble;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueString {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueString(
        _instance: *mut alt_ICore,
        val: *mut alt_String,
        _returnValue: *mut alt_RefBase_RefStore_IMValueString,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueString_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: *mut alt_String,
    ) -> *mut alt_RefBase_RefStore_IMValueString;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueList {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueList(
        _instance: *mut alt_ICore,
        size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_IMValueList,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueList_CAPI_Heap(
        _instance: *mut alt_ICore,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_IMValueList;
}
extern "C" {
    pub fn alt_ICore_CreateMValueDict(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_RefBase_RefStore_IMValueDict,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueDict_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_RefBase_RefStore_IMValueDict;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueBaseObject {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueBaseObject(
        _instance: *mut alt_ICore,
        val: *mut alt_RefBase_RefStore_IBaseObject,
        _returnValue: *mut alt_RefBase_RefStore_IMValueBaseObject,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueBaseObject_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: *mut alt_RefBase_RefStore_IBaseObject,
    ) -> *mut alt_RefBase_RefStore_IMValueBaseObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueFunction {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueFunction(
        _instance: *mut alt_ICore,
        impl_: *mut alt_IMValueFunction_Impl,
        _returnValue: *mut alt_RefBase_RefStore_IMValueFunction,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueFunction_CAPI_Heap(
        _instance: *mut alt_ICore,
        impl_: *mut alt_IMValueFunction_Impl,
    ) -> *mut alt_RefBase_RefStore_IMValueFunction;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueVector3 {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueVector3(
        _instance: *mut alt_ICore,
        val: *mut alt_Vector_float_3_VectorLayout_float_3,
        _returnValue: *mut alt_RefBase_RefStore_IMValueVector3,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueVector3_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: *mut alt_Vector_float_3_VectorLayout_float_3,
    ) -> *mut alt_RefBase_RefStore_IMValueVector3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueRGBA {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueRGBA(
        _instance: *mut alt_ICore,
        val: *mut alt_RGBA,
        _returnValue: *mut alt_RefBase_RefStore_IMValueRGBA,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueRGBA_CAPI_Heap(
        _instance: *mut alt_ICore,
        val: *mut alt_RGBA,
    ) -> *mut alt_RefBase_RefStore_IMValueRGBA;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IMValueByteArray {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateMValueByteArray(
        _instance: *mut alt_ICore,
        data: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_IMValueByteArray,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueByteArray_CAPI_Heap(
        _instance: *mut alt_ICore,
        data: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_IMValueByteArray;
}
extern "C" {
    pub fn alt_ICore_CreateMValueByteArray_1(
        _instance: *mut alt_ICore,
        size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_RefBase_RefStore_IMValueByteArray,
    );
}
extern "C" {
    pub fn alt_ICore_CreateMValueByteArray_1_CAPI_Heap(
        _instance: *mut alt_ICore,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_RefBase_RefStore_IMValueByteArray;
}
extern "C" {
    pub fn alt_ICore_IsDebug(_instance: *mut alt_ICore) -> bool;
}
extern "C" {
    pub fn alt_ICore_Hash(
        _instance: *mut alt_ICore,
        str: *mut alt_StringView,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_ICore_RegisterScriptRuntime(
        _instance: *mut alt_ICore,
        resourceType: *mut alt_StringView,
        runtime: *mut alt_IScriptRuntime,
    ) -> bool;
}
extern "C" {
    pub fn alt_ICore_FileExists(_instance: *mut alt_ICore, path: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_ICore_FileRead(
        _instance: *mut alt_ICore,
        path: *mut alt_StringView,
        _returnValue: *mut alt_String,
    );
}
extern "C" {
    pub fn alt_ICore_FileRead_CAPI_Heap(
        _instance: *mut alt_ICore,
        path: *mut alt_StringView,
    ) -> *mut alt_String;
}
extern "C" {
    pub fn alt_ICore_GetResource(
        _instance: *mut alt_ICore,
        name: *mut alt_StringView,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_ICore_GetEntityByID(
        _instance: *mut alt_ICore,
        id: ::std::os::raw::c_ushort,
        _returnValue: *mut alt_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_ICore_GetEntityByID_CAPI_Heap(
        _instance: *mut alt_ICore,
        id: ::std::os::raw::c_ushort,
    ) -> *mut alt_RefBase_RefStore_IEntity;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_RefBase_RefStore_IEntity {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_GetEntities(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_Array_RefBase_RefStore_IEntity,
    );
}
extern "C" {
    pub fn alt_ICore_GetEntities_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_Array_RefBase_RefStore_IEntity;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_RefBase_RefStore_IPlayer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_GetPlayers(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_Array_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_ICore_GetPlayers_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_Array_RefBase_RefStore_IPlayer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_Array_RefBase_RefStore_IVehicle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_GetVehicles(
        _instance: *mut alt_ICore,
        _returnValue: *mut alt_Array_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_ICore_GetVehicles_CAPI_Heap(
        _instance: *mut alt_ICore,
    ) -> *mut alt_Array_RefBase_RefStore_IVehicle;
}
extern "C" {
    pub fn alt_ICore_TriggerLocalEvent(
        _instance: *mut alt_ICore,
        ev: *mut alt_StringView,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_ICore_HasMetaData(_instance: *mut alt_ICore, key: *mut alt_StringView) -> bool;
}
extern "C" {
    pub fn alt_ICore_GetMetaData(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_ICore_GetMetaData_CAPI_Heap(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_ICore_SetMetaData(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_ICore_DeleteMetaData(_instance: *mut alt_ICore, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_HasSyncedMetaData(_instance: *mut alt_ICore, key: *mut alt_StringView)
        -> bool;
}
extern "C" {
    pub fn alt_ICore_GetSyncedMetaData(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
        _returnValue: *mut alt_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_ICore_GetSyncedMetaData_CAPI_Heap(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
    ) -> *mut alt_RefBase_RefStore_constIMValue;
}
extern "C" {
    pub fn alt_ICore_GetRootDirectory(_instance: *mut alt_ICore, _returnValue: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_GetRootDirectory_CAPI_Heap(_instance: *mut alt_ICore) -> *mut alt_StringView;
}
extern "C" {
    pub fn alt_ICore_StartResource(
        _instance: *mut alt_ICore,
        name: *mut alt_StringView,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_ICore_StopResource(_instance: *mut alt_ICore, name: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_RestartResource(
        _instance: *mut alt_ICore,
        name: *mut alt_StringView,
    ) -> *mut alt_IResource;
}
extern "C" {
    pub fn alt_ICore_TriggerClientEvent(
        _instance: *mut alt_ICore,
        target: *mut alt_RefBase_RefStore_IPlayer,
        ev: *mut alt_StringView,
        args: *mut alt_Array_RefBase_RefStore_constIMValue,
    );
}
extern "C" {
    pub fn alt_ICore_SetSyncedMetaData(
        _instance: *mut alt_ICore,
        key: *mut alt_StringView,
        val: *mut alt_RefBase_RefStore_IMValue,
    );
}
extern "C" {
    pub fn alt_ICore_DeleteSyncedMetaData(_instance: *mut alt_ICore, key: *mut alt_StringView);
}
extern "C" {
    pub fn alt_ICore_CreateVehicle(
        _instance: *mut alt_ICore,
        model: ::std::os::raw::c_uint,
        pos: *mut alt_Vector_float_3_PointLayout,
        rot: *mut alt_Vector_float_3_RotationLayout,
        _returnValue: *mut alt_RefBase_RefStore_IVehicle,
    );
}
extern "C" {
    pub fn alt_ICore_CreateVehicle_CAPI_Heap(
        _instance: *mut alt_ICore,
        model: ::std::os::raw::c_uint,
        pos: *mut alt_Vector_float_3_PointLayout,
        rot: *mut alt_Vector_float_3_RotationLayout,
    ) -> *mut alt_RefBase_RefStore_IVehicle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_ICheckpoint {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateCheckpoint(
        _instance: *mut alt_ICore,
        type_: ::std::os::raw::c_uchar,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        height: f32,
        color: *mut alt_RGBA,
        _returnValue: *mut alt_RefBase_RefStore_ICheckpoint,
    );
}
extern "C" {
    pub fn alt_ICore_CreateCheckpoint_CAPI_Heap(
        _instance: *mut alt_ICore,
        type_: ::std::os::raw::c_uchar,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        height: f32,
        color: *mut alt_RGBA,
    ) -> *mut alt_RefBase_RefStore_ICheckpoint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IBlip {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateBlip(
        _instance: *mut alt_ICore,
        target: *mut alt_RefBase_RefStore_IPlayer,
        type_: alt_IBlip_BlipType,
        pos: *mut alt_Vector_float_3_PointLayout,
        _returnValue: *mut alt_RefBase_RefStore_IBlip,
    );
}
extern "C" {
    pub fn alt_ICore_CreateBlip_CAPI_Heap(
        _instance: *mut alt_ICore,
        target: *mut alt_RefBase_RefStore_IPlayer,
        type_: alt_IBlip_BlipType,
        pos: *mut alt_Vector_float_3_PointLayout,
    ) -> *mut alt_RefBase_RefStore_IBlip;
}
extern "C" {
    pub fn alt_ICore_CreateBlip_1(
        _instance: *mut alt_ICore,
        target: *mut alt_RefBase_RefStore_IPlayer,
        type_: alt_IBlip_BlipType,
        attachTo: *mut alt_RefBase_RefStore_IEntity,
        _returnValue: *mut alt_RefBase_RefStore_IBlip,
    );
}
extern "C" {
    pub fn alt_ICore_CreateBlip_1_CAPI_Heap(
        _instance: *mut alt_ICore,
        target: *mut alt_RefBase_RefStore_IPlayer,
        type_: alt_IBlip_BlipType,
        attachTo: *mut alt_RefBase_RefStore_IEntity,
    ) -> *mut alt_RefBase_RefStore_IBlip;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_RefBase_RefStore_IVoiceChannel {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_ICore_CreateVoiceChannel(
        _instance: *mut alt_ICore,
        spatial: bool,
        maxDistance: f32,
        _returnValue: *mut alt_RefBase_RefStore_IVoiceChannel,
    );
}
extern "C" {
    pub fn alt_ICore_CreateVoiceChannel_CAPI_Heap(
        _instance: *mut alt_ICore,
        spatial: bool,
        maxDistance: f32,
    ) -> *mut alt_RefBase_RefStore_IVoiceChannel;
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCylinder(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        height: f32,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCylinder_CAPI_Heap(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        height: f32,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_ICore_CreateColShapeSphere(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_ICore_CreateColShapeSphere_CAPI_Heap(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCircle(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCircle_CAPI_Heap(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        radius: f32,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCube(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        pos2: *mut alt_Vector_float_3_PointLayout,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_ICore_CreateColShapeCube_CAPI_Heap(
        _instance: *mut alt_ICore,
        pos: *mut alt_Vector_float_3_PointLayout,
        pos2: *mut alt_Vector_float_3_PointLayout,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_ICore_CreateColShapeRectangle(
        _instance: *mut alt_ICore,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
        z: f32,
        _returnValue: *mut alt_RefBase_RefStore_IColShape,
    );
}
extern "C" {
    pub fn alt_ICore_CreateColShapeRectangle_CAPI_Heap(
        _instance: *mut alt_ICore,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
        z: f32,
    ) -> *mut alt_RefBase_RefStore_IColShape;
}
extern "C" {
    pub fn alt_ICore_DestroyBaseObject(
        _instance: *mut alt_ICore,
        handle: *mut alt_RefBase_RefStore_IBaseObject,
    );
}
extern "C" {
    pub fn alt_ICore_GetPlayersByName(
        _instance: *mut alt_ICore,
        name: *mut alt_StringView,
        _returnValue: *mut alt_Array_RefBase_RefStore_IPlayer,
    );
}
extern "C" {
    pub fn alt_ICore_GetPlayersByName_CAPI_Heap(
        _instance: *mut alt_ICore,
        name: *mut alt_StringView,
    ) -> *mut alt_Array_RefBase_RefStore_IPlayer;
}
extern "C" {
    pub fn alt_ICore_GetNetTime(_instance: *mut alt_ICore) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alt_ICore_Instance() -> *mut alt_ICore;
}
extern "C" {
    pub fn alt_ICore_SetInstance(server: *mut alt_ICore);
}
extern "C" {
    pub fn alt_ICore_Assign_constICoreRef(_instance: *mut alt_ICore, _p0: *mut alt_ICore);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_config_Error {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_config_Error_CAPI_Free(ptr: *mut alt_config_Error);
}
extern "C" {
    pub fn alt_config_Error_what(_instance: *mut alt_config_Error) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alt_config_Error_position(
        _instance: *mut alt_config_Error,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_config_Error_line(_instance: *mut alt_config_Error) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_config_Error_column(_instance: *mut alt_config_Error)
        -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn alt_config_Error_Create_1(
        _p0: *mut alt_config_Error,
        _returnValue: *mut alt_config_Error,
    );
}
extern "C" {
    pub fn alt_config_Error_Create_1_CAPI_Heap(_p0: *mut alt_config_Error)
        -> *mut alt_config_Error;
}
extern "C" {
    pub fn alt_config_Error_Create_2(
        _p0: *mut alt_config_Error,
        _returnValue: *mut alt_config_Error,
    );
}
extern "C" {
    pub fn alt_config_Error_Create_2_CAPI_Heap(_p0: *mut alt_config_Error)
        -> *mut alt_config_Error;
}
extern "C" {
    pub fn alt_config_Error_Assign_constconfig_ErrorRef(
        _instance: *mut alt_config_Error,
        _p0: *mut alt_config_Error,
    );
}
extern "C" {
    pub fn alt_config_Error_Assign_config_ErrorRefRef(
        _instance: *mut alt_config_Error,
        _p0: *mut alt_config_Error,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_config_Node_Type {
    ALT_CONFIG_NODE_TYPE_NONE = 0,
    ALT_CONFIG_NODE_TYPE_SCALAR = 1,
    ALT_CONFIG_NODE_TYPE_LIST = 2,
    ALT_CONFIG_NODE_TYPE_DICT = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_config_Node {
    pub type_: alt_config_Node_Type,
    pub val: *mut alt_config_Node_Value,
}
#[test]
fn bindgen_test_layout_alt_config_Node() {
    assert_eq!(
        ::std::mem::size_of::<alt_config_Node>(),
        16usize,
        concat!("Size of: ", stringify!(alt_config_Node))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_config_Node>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_config_Node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_config_Node>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_config_Node),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_config_Node>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_config_Node),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn alt_config_Node_CAPI_Free(ptr: *mut alt_config_Node);
}
extern "C" {
    pub fn alt_config_Node_Create(_returnValue: *mut alt_config_Node);
}
extern "C" {
    pub fn alt_config_Node_Create_CAPI_Heap() -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_1(_val: bool, _returnValue: *mut alt_config_Node);
}
extern "C" {
    pub fn alt_config_Node_Create_1_CAPI_Heap(_val: bool) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_2(_val: f64, _returnValue: *mut alt_config_Node);
}
extern "C" {
    pub fn alt_config_Node_Create_2_CAPI_Heap(_val: f64) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_3(val: ::std::os::raw::c_int, _returnValue: *mut alt_config_Node);
}
extern "C" {
    pub fn alt_config_Node_Create_3_CAPI_Heap(val: ::std::os::raw::c_int) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_4(
        val: ::std::os::raw::c_uint,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_Create_4_CAPI_Heap(val: ::std::os::raw::c_uint) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_5(
        val: ::std::os::raw::c_longlong,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_Create_5_CAPI_Heap(
        val: ::std::os::raw::c_longlong,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_6(
        val: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_Create_6_CAPI_Heap(
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_8(
        val: *mut ::std::os::raw::c_char,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_Create_8_CAPI_Heap(
        val: *mut ::std::os::raw::c_char,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Create_11(
        that: *mut alt_config_Node,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_Create_11_CAPI_Heap(that: *mut alt_config_Node) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Assign_constconfig_NodeRef(
        _instance: *mut alt_config_Node,
        that: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Node_IsNone(_instance: *mut alt_config_Node) -> bool;
}
extern "C" {
    pub fn alt_config_Node_IsScalar(_instance: *mut alt_config_Node) -> bool;
}
extern "C" {
    pub fn alt_config_Node_IsList(_instance: *mut alt_config_Node) -> bool;
}
extern "C" {
    pub fn alt_config_Node_IsDict(_instance: *mut alt_config_Node) -> bool;
}
extern "C" {
    pub fn alt_config_Node_ToBool(_instance: *mut alt_config_Node) -> bool;
}
extern "C" {
    pub fn alt_config_Node_ToBool_1(_instance: *mut alt_config_Node, def: bool) -> bool;
}
extern "C" {
    pub fn alt_config_Node_ToNumber(_instance: *mut alt_config_Node) -> f64;
}
extern "C" {
    pub fn alt_config_Node_ToNumber_1(_instance: *mut alt_config_Node, def: f64) -> f64;
}
extern "C" {
    pub fn alt_config_Node_Access_size_t(
        _instance: *mut alt_config_Node,
        idx: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_Access_constcharPtr(
        _instance: *mut alt_config_Node,
        key: *mut ::std::os::raw::c_char,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Node_To__Bool(_instance: *mut alt_config_Node) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_config_Node_Value {
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_alt_config_Node_Value() {
    assert_eq!(
        ::std::mem::size_of::<alt_config_Node_Value>(),
        8usize,
        concat!("Size of: ", stringify!(alt_config_Node_Value))
    );
    assert_eq!(
        ::std::mem::align_of::<alt_config_Node_Value>(),
        8usize,
        concat!("Alignment of ", stringify!(alt_config_Node_Value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<alt_config_Node_Value>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alt_config_Node_Value),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_config_Parser {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_config_Parser_CAPI_Free(ptr: *mut alt_config_Parser);
}
extern "C" {
    pub fn alt_config_Parser_Create_2(
        data: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        _returnValue: *mut alt_config_Parser,
    );
}
extern "C" {
    pub fn alt_config_Parser_Create_2_CAPI_Heap(
        data: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut alt_config_Parser;
}
extern "C" {
    pub fn alt_config_Parser_Parse(
        _instance: *mut alt_config_Parser,
        _returnValue: *mut alt_config_Node,
    );
}
extern "C" {
    pub fn alt_config_Parser_Parse_CAPI_Heap(
        _instance: *mut alt_config_Parser,
    ) -> *mut alt_config_Node;
}
extern "C" {
    pub fn alt_config_Parser_Create_3(
        _p0: *mut alt_config_Parser,
        _returnValue: *mut alt_config_Parser,
    );
}
extern "C" {
    pub fn alt_config_Parser_Create_3_CAPI_Heap(
        _p0: *mut alt_config_Parser,
    ) -> *mut alt_config_Parser;
}
extern "C" {
    pub fn alt_config_Parser_Create_4(
        _p0: *mut alt_config_Parser,
        _returnValue: *mut alt_config_Parser,
    );
}
extern "C" {
    pub fn alt_config_Parser_Create_4_CAPI_Heap(
        _p0: *mut alt_config_Parser,
    ) -> *mut alt_config_Parser;
}
extern "C" {
    pub fn alt_config_Parser_Assign_config_ParserRefRef(
        _instance: *mut alt_config_Parser,
        _p0: *mut alt_config_Parser,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum alt_config_Parser_Token_Type {
    ALT_CONFIG_PARSER_TOKEN_TYPE_ARRAY_START = 0,
    ALT_CONFIG_PARSER_TOKEN_TYPE_ARRAY_END = 1,
    ALT_CONFIG_PARSER_TOKEN_TYPE_DICT_START = 2,
    ALT_CONFIG_PARSER_TOKEN_TYPE_DICT_END = 3,
    ALT_CONFIG_PARSER_TOKEN_TYPE_KEY = 4,
    ALT_CONFIG_PARSER_TOKEN_TYPE_SCALAR = 5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_config_Emitter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn alt_config_Emitter_CAPI_Free(ptr: *mut alt_config_Emitter);
}
pub type OnCreateBaseObjectFnType = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut alt_IResource, arg2: *mut alt_RefBase_RefStore_IBaseObject),
>;
pub type OnRemoveBaseObjectFnType = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut alt_IResource, arg2: *mut alt_RefBase_RefStore_IBaseObject),
>;
extern "C" {
    pub fn alt_CAPIScriptRuntime_Create(
        CreateImplFn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut alt_IScriptRuntime,
                arg2: *mut alt_IResource,
            ) -> *mut alt_IResource_Impl,
        >,
        DestroyImplFn: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut alt_IScriptRuntime, arg2: *mut alt_IResource_Impl),
        >,
        OnTickFn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut alt_IScriptRuntime)>,
    ) -> *mut alt_IScriptRuntime;
}
extern "C" {
    pub fn alt_CAPIResource_Impl_Create(
        resource: *mut alt_IResource,
        MakeClientFn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut alt_IResource,
                arg2: *mut alt_IResource_CreationInfo,
                arg3: *mut alt_Array_String,
            ) -> bool,
        >,
        StartFn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut alt_IResource) -> bool>,
        StopFn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut alt_IResource) -> bool>,
        OnEventFn: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut alt_IResource, arg2: *mut alt_CEvent) -> bool,
        >,
        OnTickFn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut alt_IResource)>,
        OnCreateBaseObjectFn: OnCreateBaseObjectFnType,
        OnRemoveBaseObjectFn: OnRemoveBaseObjectFnType,
    ) -> *mut alt_IResource_Impl;
}
extern "C" {
    pub fn alt_CAPIResource_Impl_SetExtra(
        resource: *mut alt_IResource_Impl,
        extra: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn alt_CAPIResource_Impl_GetExtra(
        resource: *mut alt_IResource_Impl,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IMValue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IBaseObject {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IPlayer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IVehicle {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IEntity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_IColShape {
    pub _address: u8,
}
